{"version":3,"sources":["webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/components/monkeys/password.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/pages/loginPage.ts"],"names":["passwordManager","invokeApi","then","result","settings","this","getState","state","currentHashPromise","newHashPromise","params","password","new_settings","_","hint","email","currentPassword","invokeCrypto","Promise","resolve","newAlgo","new_algo","salt1","Uint8Array","length","randomize","set","newPassword","all","hashes","new_password_hash","options","inputCheckPassword","auth","appUsersManager","saveApiUser","user","setUserAuth","id","code","super","plainText","passwordVisible","onVisibilityClick","e","cancelEvent","toggleVisible","classList","toggle","input","type","onVisibilityClickAdditional","setAttribute","autocomplete","stealthy","document","createElement","add","tabIndex","parentElement","prepend","insertBefore","cloneNode","nextSibling","container","append","addEventListener","passwordInputField","size","needFrame","loadPromise","lottieLoader","loadAnimationFromURL","loop","autoplay","width","height","noCache","_animation","animation","currentFrame","direction","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame","remove","passwordInput","page","className","withInputWrapper","titleLangKey","subtitleLangKey","btnNext","btnNextI18n","IntlElement","key","element","label","name","getStateInterval","inputWrapper","window","setInterval","_state","replaceContent","htmlToSpan","wrapEmojiText","setLabel","onSubmit","value","toggleDisability","update","preloader","check","response","clearInterval","m","default","mount","monkey","removeAttribute","catch","err","select","mediaSizes","isMobile","imageDiv","load","focus","appStateManager","pushToState","LoginPage","body","querySelector","title","subtitle"],"mappings":"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","file":"22.2c98b9c0d059af0ed5b3.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { AccountPassword, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport appUsersManager from '../appManagers/appUsersManager';\r\nimport apiManager from './mtprotoworker';\r\n\r\nexport class PasswordManager {\r\n  public getState(): Promise<AccountPassword> {\r\n    return apiManager.invokeApi('account.getPassword').then((result) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n  public updateSettings(settings: {\r\n    hint?: string,\r\n    email?: string,\r\n    newPassword?: string,\r\n    currentPassword?: string\r\n  } = {}) {\r\n    //state = Object.assign({}, state);\r\n    //state.new_algo = Object.assign({}, state.new_algo);\r\n\r\n    return this.getState().then(state => {\r\n      let currentHashPromise: Promise<InputCheckPasswordSRP>;\r\n      let newHashPromise: Promise<Uint8Array>;\r\n      const params: AccountUpdatePasswordSettings = {\r\n        password: null,\r\n        new_settings: {\r\n          _: 'account.passwordInputSettings',\r\n          hint: settings.hint,\r\n          email: settings.email\r\n        }\r\n      };\r\n  \r\n      if(settings.currentPassword) {\r\n        currentHashPromise = apiManager.invokeCrypto('computeSRP', settings.currentPassword, state, false) as any;\r\n      } else {\r\n        currentHashPromise = Promise.resolve({\r\n          _: 'inputCheckPasswordEmpty'\r\n        });\r\n      }\r\n  \r\n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\r\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\r\n      salt1.randomize();\r\n      salt1.set(newAlgo.salt1, 0);\r\n      newAlgo.salt1 = salt1;\r\n  \r\n      if(settings.newPassword) {\r\n        newHashPromise = apiManager.invokeCrypto('computeSRP', settings.newPassword, state, true) as any;\r\n      } else {\r\n        newHashPromise = Promise.resolve(new Uint8Array());\r\n      }\r\n  \r\n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\r\n        params.password = hashes[0];\r\n        params.new_settings.new_algo = newAlgo;\r\n        params.new_settings.new_password_hash = hashes[1];\r\n  \r\n        return apiManager.invokeApi('account.updatePasswordSettings', params);\r\n      });\r\n    });\r\n  }\r\n\r\n  public check(password: string, state: AccountPassword, options: any = {}) {\r\n    return apiManager.invokeCrypto('computeSRP', password, state, false).then((inputCheckPassword) => {\r\n      //console.log('SRP', inputCheckPassword);\r\n      return apiManager.invokeApi('auth.checkPassword', {\r\n        password: inputCheckPassword as InputCheckPasswordSRP.inputCheckPasswordSRP\r\n      }, options).then(auth => {\r\n        if(auth._ === 'auth.authorization') {\r\n          appUsersManager.saveApiUser(auth.user);\r\n          apiManager.setUserAuth(auth.user.id);\r\n        }\r\n\r\n        return auth;\r\n      });\r\n    });\r\n  }\r\n\r\n  public confirmPasswordEmail(code: string) {\r\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\r\n  }\r\n\r\n  public resendPasswordEmail() {\r\n    return apiManager.invokeApi('account.resendPasswordEmail');\r\n  }\r\n\r\n  public cancelPasswordEmail() {\r\n    return apiManager.invokeApi('account.cancelPasswordEmail');\r\n  }\r\n\r\n  /* public requestRecovery(options: any = {}) {\r\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\r\n  }\r\n\r\n  public recover(code: any, options: any = {}) {\r\n    return apiManager.invokeApi('auth.recoverPassword', {\r\n      code\r\n    }, options);\r\n  } */\r\n}\r\n\r\nconst passwordManager = new PasswordManager();\r\nMOUNT_CLASS_TO.passwordManager = passwordManager;\r\nexport default passwordManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport InputField, { InputFieldOptions } from \"./inputField\";\r\n\r\nexport default class PasswordInputField extends InputField {\r\n  public passwordVisible = false;\r\n  public toggleVisible: HTMLElement;\r\n  public onVisibilityClickAdditional: () => void;\r\n\r\n  constructor(options: InputFieldOptions = {}) {\r\n    super({\r\n      plainText: true,\r\n      ...options\r\n    });\r\n\r\n    const input = this.input as HTMLInputElement;\r\n    input.type = 'password';\r\n    input.setAttribute('required', '');\r\n    input.autocomplete = 'off';\r\n    /* input.readOnly = true;\r\n\r\n    input.addEventListener('focus', () => {\r\n      input.removeAttribute('readonly');\r\n    }, {once: true}); */\r\n\r\n    // * https://stackoverflow.com/a/35949954/6758968\r\n    const stealthy = document.createElement('input');\r\n    stealthy.classList.add('stealthy');\r\n    stealthy.tabIndex = -1;\r\n    stealthy.type = 'password';\r\n    input.parentElement.prepend(stealthy);\r\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\r\n\r\n    const toggleVisible = this.toggleVisible = document.createElement('span');\r\n    toggleVisible.classList.add('toggle-visible', 'tgico');\r\n\r\n    this.container.classList.add('input-field-password');\r\n    this.container.append(toggleVisible);\r\n\r\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\r\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\r\n  }\r\n\r\n  public onVisibilityClick = (e: Event) => {\r\n    cancelEvent(e);\r\n    this.passwordVisible = !this.passwordVisible;\r\n\r\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\r\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\r\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\r\nimport PasswordInputField from \"../passwordInputField\";\r\n\r\nexport default class PasswordMonkey {\r\n  public container: HTMLElement;\r\n  public animation: RLottiePlayer;\r\n  public needFrame = 0;\r\n  protected loadPromise: Promise<void>;\r\n\r\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('media-sticker-wrapper');\r\n  }\r\n\r\n  public load() {\r\n    if(this.loadPromise) return this.loadPromise;\r\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\r\n      container: this.container,\r\n      loop: false,\r\n      autoplay: false,\r\n      width: this.size,\r\n      height: this.size,\r\n      noCache: true\r\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\r\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\r\n      //return;\r\n      this.animation = _animation;\r\n      this.animation.addEventListener('enterFrame', currentFrame => {\r\n        //console.log('enterFrame', currentFrame, this.needFrame);\r\n\r\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\r\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\r\n            this.animation.setSpeed(1);\r\n            this.animation.pause();\r\n        } \r\n      });\r\n\r\n      this.passwordInputField.onVisibilityClickAdditional = () => {\r\n        if(this.passwordInputField.passwordVisible) {\r\n          this.animation.setDirection(1);\r\n          this.animation.curFrame = 0;\r\n          this.needFrame = 16;\r\n          this.animation.play();\r\n        } else {\r\n          this.animation.setDirection(-1);\r\n          this.animation.curFrame = 16;\r\n          this.needFrame = 0;\r\n          this.animation.play();\r\n        }\r\n      };\r\n\r\n      return lottieLoader.waitForFirstFrame(_animation);\r\n    });\r\n  }\r\n\r\n  public remove() {\r\n    if(this.animation) {\r\n      this.animation.remove();\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from '../components/misc';\r\nimport mediaSizes from '../helpers/mediaSizes';\r\nimport { AccountPassword } from '../layer';\r\nimport appStateManager from '../lib/appManagers/appStateManager';\r\nimport passwordManager from '../lib/mtproto/passwordManager';\r\nimport Page from './page';\r\nimport Button from '../components/button';\r\nimport PasswordInputField from '../components/passwordInputField';\r\nimport PasswordMonkey from '../components/monkeys/password';\r\nimport RichTextProcessor from '../lib/richtextprocessor';\r\nimport I18n from '../lib/langPack';\r\nimport LoginPage from './loginPage';\r\nimport { cancelEvent } from '../helpers/dom/cancelEvent';\r\nimport { attachClickEvent } from '../helpers/dom/clickEvent';\r\nimport htmlToSpan from '../helpers/dom/htmlToSpan';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\n\r\nconst TEST = false;\r\nlet passwordInput: HTMLInputElement;\r\n\r\nlet onFirstMount = (): Promise<any> => {\r\n  const page = new LoginPage({\r\n    className: 'page-password',\r\n    withInputWrapper: true,\r\n    titleLangKey: 'Login.Password.Title',\r\n    subtitleLangKey: 'Login.Password.Subtitle'\r\n  });\r\n\r\n  const btnNext = Button('btn-primary btn-color-primary');\r\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\r\n\r\n  btnNext.append(btnNextI18n.element);\r\n\r\n  const passwordInputField = new PasswordInputField({\r\n    label: 'LoginPassword',\r\n    name: 'password'\r\n  });\r\n\r\n  passwordInput = passwordInputField.input as HTMLInputElement;\r\n\r\n  page.inputWrapper.append(passwordInputField.container, btnNext);\r\n\r\n  let getStateInterval: number;\r\n\r\n  let getState = () => {\r\n    // * just to check session relevance\r\n    if(!getStateInterval) {\r\n      getStateInterval = window.setInterval(getState, 10e3);\r\n    }\r\n\r\n    return !TEST && passwordManager.getState().then(_state => {\r\n      state = _state;\r\n\r\n      if(state.hint) {\r\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\r\n      } else {\r\n        passwordInputField.setLabel();\r\n      }\r\n    });\r\n  };\r\n\r\n  let state: AccountPassword;\r\n  \r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(!passwordInput.value.length) {\r\n      passwordInput.classList.add('error');\r\n      return;\r\n    }\r\n\r\n    const toggle = toggleDisability([passwordInput, btnNext], true);\r\n    let value = passwordInput.value;\r\n\r\n    btnNextI18n.update({key: 'PleaseWait'});\r\n    const preloader = putPreloader(btnNext);\r\n\r\n    passwordManager.check(value, state).then((response) => {\r\n      //console.log('passwordManager response:', response);\r\n        \r\n      switch(response._) {\r\n        case 'auth.authorization':\r\n          clearInterval(getStateInterval);\r\n          import('./pageIm').then(m => {\r\n            m.default.mount();\r\n          });\r\n          if(monkey) monkey.remove();\r\n          break;\r\n        default:\r\n          btnNext.removeAttribute('disabled');\r\n          btnNextI18n.update({key: response._ as any});\r\n          preloader.remove();\r\n          break;\r\n      }\r\n    }).catch((err: any) => {\r\n      toggle();\r\n      passwordInputField.input.classList.add('error');\r\n      \r\n      switch(err.type) {\r\n        default:\r\n          //btnNext.innerText = err.type;\r\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\r\n          passwordInput.select();\r\n          break;\r\n      }\r\n\r\n      preloader.remove();\r\n  \r\n      getState();\r\n    });\r\n  };\r\n  \r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  passwordInput.addEventListener('keypress', function(this, e) {\r\n    this.classList.remove('error');\r\n    btnNextI18n.update({key: 'Login.Next'});\r\n\r\n    if(e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  const size = mediaSizes.isMobile ? 100 : 166;\r\n  const monkey = new PasswordMonkey(passwordInputField, size);\r\n  page.imageDiv.append(monkey.container);\r\n  return Promise.all([\r\n    monkey.load(),\r\n    getState()\r\n  ]);\r\n};\r\n\r\nconst page = new Page('page-password', true, onFirstMount, null, () => {\r\n  //if(!isAppleMobile) {\r\n    passwordInput.focus();\r\n  //}\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\r\n});\r\n\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { LangPackKey, i18n } from \"../lib/langPack\";\r\n\r\nexport default class LoginPage {\r\n  public element: HTMLElement;\r\n  public container: HTMLElement;\r\n  public imageDiv: HTMLElement;\r\n  public inputWrapper: HTMLElement;\r\n  public title: HTMLElement;\r\n  public subtitle: HTMLParagraphElement;\r\n\r\n  constructor(options: {\r\n    className: string,\r\n    withInputWrapper?: boolean,\r\n    titleLangKey?: LangPackKey,\r\n    subtitleLangKey?: LangPackKey,\r\n  }) {\r\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\r\n    //this.element = document.createElement('div');\r\n    //this.element.className = 'page-' + options.className;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'container center-align';\r\n\r\n    this.imageDiv = document.createElement('div');\r\n    this.imageDiv.className = 'auth-image';\r\n\r\n    this.title = document.createElement('h4');\r\n    if(options.titleLangKey) {\r\n      this.title.append(i18n(options.titleLangKey));\r\n    }\r\n\r\n    this.subtitle = document.createElement('p');\r\n    this.subtitle.className = 'subtitle';\r\n    if(options.subtitleLangKey) {\r\n      this.subtitle.append(i18n(options.subtitleLangKey));\r\n    }\r\n    \r\n    this.container.append(this.imageDiv, this.title, this.subtitle);\r\n\r\n    if(options.withInputWrapper) {\r\n      this.inputWrapper = document.createElement('div');\r\n      this.inputWrapper.className = 'input-wrapper';\r\n      this.container.append(this.inputWrapper);\r\n    }\r\n\r\n    this.element.append(this.container);\r\n  }\r\n}\r\n"],"sourceRoot":""}