{"version":3,"sources":["webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/components/monkeys/password.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/helpers/dom/replaceContent.ts","webpack:///./src/components/inputField.ts","webpack:///./src/helpers/dom/selectElementContents.ts","webpack:///./src/helpers/dom/getRichValue.ts","webpack:///./src/helpers/dom/toggleDisability.ts","webpack:///./src/helpers/dom/getRichElementValue.ts","webpack:///./src/helpers/dom/findUpAttribute.ts","webpack:///./src/helpers/dom/isInputEmpty.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/helpers/formatPhoneNumber.ts"],"names":["passwordManager","invokeApi","then","result","settings","this","getState","state","currentHashPromise","newHashPromise","params","password","new_settings","_","hint","email","currentPassword","invokeCrypto","Promise","resolve","newAlgo","new_algo","salt1","Uint8Array","length","randomize","set","newPassword","all","hashes","new_password_hash","options","inputCheckPassword","auth","appUsersManager","saveApiUser","user","setUserAuth","id","code","super","plainText","passwordVisible","onVisibilityClick","e","cancelEvent","toggleVisible","classList","toggle","input","type","onVisibilityClickAdditional","setAttribute","autocomplete","stealthy","document","createElement","add","tabIndex","parentElement","prepend","insertBefore","cloneNode","nextSibling","container","append","addEventListener","passwordInputField","size","needFrame","loadPromise","lottieLoader","loadAnimationFromURL","loop","autoplay","width","height","noCache","_animation","animation","currentFrame","direction","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame","remove","passwordInput","page","className","withInputWrapper","titleLangKey","subtitleLangKey","btnNext","btnNextI18n","IntlElement","key","element","label","name","getStateInterval","inputWrapper","window","setInterval","_state","replaceContent","htmlToSpan","wrapEmojiText","setLabel","onSubmit","value","toggleDisability","update","preloader","check","response","clearInterval","m","default","mount","monkey","removeAttribute","catch","err","select","mediaSizes","isMobile","imageDiv","load","focus","appStateManager","pushToState","elem","node","innerHTML","firstChild","lastChild","replaceWith","textContent","init","findUpAttribute","target","preventDefault","text","originalEvent","clipboardData","getData","entities","parseEntities","filter","wrapRichText","noLinks","wrappingDraft","execCommand","InputState","required","validate","maxLength","showLengthOn","Math","min","round","placeholder","processInput","labelText","firstElementChild","observer","MutationObserver","isInputEmpty","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","wasInputFakeClientHeight","undefined","border","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","getRichValue","diff","isError","el","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectElementContents","labelOptions","scrollHeight","clientHeight","style","setValueSilently","fireFakeInput","originalValue","isChanged","silent","wrapDraftText","setDraftValue","Error","Valid","setState","field","withEntities","lines","line","push","join","replace","combineSameEntities","elements","disable","forEach","markdownTags","bold","match","entityName","underline","italic","monospace","strikethrough","link","mentionName","getRichElementValue","selNode","selOffset","offset","nodeType","nodeValue","substr","trim","parentNode","tag","closest","getAttribute","url","href","user_id","dataset","follow","isSelected","isBlock","tagName","splice","alt","curChild","attribute","hasAttribute","LoginPage","body","querySelector","title","subtitle","prefixes","Map","maxPrefixLength","setPrefix","country","prefix","country_code","max","formatPhoneNumber","originalStr","countriesList","country_codes","prefixCountry","str","phoneCode","slice","i","get","formatted","leftPattern","patterns","searchForPattern","pattern","mostMatchedPatternMatches","mostMatchedPattern","_pattern","patternMatches","k","split","symbol","idx"],"mappings":"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","file":"17.37f050d3288d746087fc.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { AccountPassword, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport appUsersManager from '../appManagers/appUsersManager';\r\nimport apiManager from './mtprotoworker';\r\n\r\nexport class PasswordManager {\r\n  public getState(): Promise<AccountPassword> {\r\n    return apiManager.invokeApi('account.getPassword').then((result) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n  public updateSettings(settings: {\r\n    hint?: string,\r\n    email?: string,\r\n    newPassword?: string,\r\n    currentPassword?: string\r\n  } = {}) {\r\n    //state = Object.assign({}, state);\r\n    //state.new_algo = Object.assign({}, state.new_algo);\r\n\r\n    return this.getState().then(state => {\r\n      let currentHashPromise: Promise<InputCheckPasswordSRP>;\r\n      let newHashPromise: Promise<Uint8Array>;\r\n      const params: AccountUpdatePasswordSettings = {\r\n        password: null,\r\n        new_settings: {\r\n          _: 'account.passwordInputSettings',\r\n          hint: settings.hint,\r\n          email: settings.email\r\n        }\r\n      };\r\n  \r\n      if(settings.currentPassword) {\r\n        currentHashPromise = apiManager.invokeCrypto('computeSRP', settings.currentPassword, state, false) as any;\r\n      } else {\r\n        currentHashPromise = Promise.resolve({\r\n          _: 'inputCheckPasswordEmpty'\r\n        });\r\n      }\r\n  \r\n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\r\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\r\n      salt1.randomize();\r\n      salt1.set(newAlgo.salt1, 0);\r\n      newAlgo.salt1 = salt1;\r\n  \r\n      if(settings.newPassword) {\r\n        newHashPromise = apiManager.invokeCrypto('computeSRP', settings.newPassword, state, true) as any;\r\n      } else {\r\n        newHashPromise = Promise.resolve(new Uint8Array());\r\n      }\r\n  \r\n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\r\n        params.password = hashes[0];\r\n        params.new_settings.new_algo = newAlgo;\r\n        params.new_settings.new_password_hash = hashes[1];\r\n  \r\n        return apiManager.invokeApi('account.updatePasswordSettings', params);\r\n      });\r\n    });\r\n  }\r\n\r\n  public check(password: string, state: AccountPassword, options: any = {}) {\r\n    return apiManager.invokeCrypto('computeSRP', password, state, false).then((inputCheckPassword) => {\r\n      //console.log('SRP', inputCheckPassword);\r\n      return apiManager.invokeApi('auth.checkPassword', {\r\n        password: inputCheckPassword as InputCheckPasswordSRP.inputCheckPasswordSRP\r\n      }, options).then(auth => {\r\n        if(auth._ === 'auth.authorization') {\r\n          appUsersManager.saveApiUser(auth.user);\r\n          apiManager.setUserAuth(auth.user.id);\r\n        }\r\n\r\n        return auth;\r\n      });\r\n    });\r\n  }\r\n\r\n  public confirmPasswordEmail(code: string) {\r\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\r\n  }\r\n\r\n  public resendPasswordEmail() {\r\n    return apiManager.invokeApi('account.resendPasswordEmail');\r\n  }\r\n\r\n  public cancelPasswordEmail() {\r\n    return apiManager.invokeApi('account.cancelPasswordEmail');\r\n  }\r\n\r\n  /* public requestRecovery(options: any = {}) {\r\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\r\n  }\r\n\r\n  public recover(code: any, options: any = {}) {\r\n    return apiManager.invokeApi('auth.recoverPassword', {\r\n      code\r\n    }, options);\r\n  } */\r\n}\r\n\r\nconst passwordManager = new PasswordManager();\r\nMOUNT_CLASS_TO.passwordManager = passwordManager;\r\nexport default passwordManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport InputField, { InputFieldOptions } from \"./inputField\";\r\n\r\nexport default class PasswordInputField extends InputField {\r\n  public passwordVisible = false;\r\n  public toggleVisible: HTMLElement;\r\n  public onVisibilityClickAdditional: () => void;\r\n\r\n  constructor(options: InputFieldOptions = {}) {\r\n    super({\r\n      plainText: true,\r\n      ...options\r\n    });\r\n\r\n    const input = this.input as HTMLInputElement;\r\n    input.type = 'password';\r\n    input.setAttribute('required', '');\r\n    input.autocomplete = 'off';\r\n    /* input.readOnly = true;\r\n\r\n    input.addEventListener('focus', () => {\r\n      input.removeAttribute('readonly');\r\n    }, {once: true}); */\r\n\r\n    // * https://stackoverflow.com/a/35949954/6758968\r\n    const stealthy = document.createElement('input');\r\n    stealthy.classList.add('stealthy');\r\n    stealthy.tabIndex = -1;\r\n    stealthy.type = 'password';\r\n    input.parentElement.prepend(stealthy);\r\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\r\n\r\n    const toggleVisible = this.toggleVisible = document.createElement('span');\r\n    toggleVisible.classList.add('toggle-visible', 'tgico');\r\n\r\n    this.container.classList.add('input-field-password');\r\n    this.container.append(toggleVisible);\r\n\r\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\r\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\r\n  }\r\n\r\n  public onVisibilityClick = (e: Event) => {\r\n    cancelEvent(e);\r\n    this.passwordVisible = !this.passwordVisible;\r\n\r\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\r\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\r\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\r\nimport PasswordInputField from \"../passwordInputField\";\r\n\r\nexport default class PasswordMonkey {\r\n  public container: HTMLElement;\r\n  public animation: RLottiePlayer;\r\n  public needFrame = 0;\r\n  protected loadPromise: Promise<void>;\r\n\r\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('media-sticker-wrapper');\r\n  }\r\n\r\n  public load() {\r\n    if(this.loadPromise) return this.loadPromise;\r\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\r\n      container: this.container,\r\n      loop: false,\r\n      autoplay: false,\r\n      width: this.size,\r\n      height: this.size,\r\n      noCache: true\r\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\r\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\r\n      //return;\r\n      this.animation = _animation;\r\n      this.animation.addEventListener('enterFrame', currentFrame => {\r\n        //console.log('enterFrame', currentFrame, this.needFrame);\r\n\r\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\r\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\r\n            this.animation.setSpeed(1);\r\n            this.animation.pause();\r\n        } \r\n      });\r\n\r\n      this.passwordInputField.onVisibilityClickAdditional = () => {\r\n        if(this.passwordInputField.passwordVisible) {\r\n          this.animation.setDirection(1);\r\n          this.animation.curFrame = 0;\r\n          this.needFrame = 16;\r\n          this.animation.play();\r\n        } else {\r\n          this.animation.setDirection(-1);\r\n          this.animation.curFrame = 16;\r\n          this.needFrame = 0;\r\n          this.animation.play();\r\n        }\r\n      };\r\n\r\n      return lottieLoader.waitForFirstFrame(_animation);\r\n    });\r\n  }\r\n\r\n  public remove() {\r\n    if(this.animation) {\r\n      this.animation.remove();\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from '../components/misc';\r\nimport mediaSizes from '../helpers/mediaSizes';\r\nimport { AccountPassword } from '../layer';\r\nimport appStateManager from '../lib/appManagers/appStateManager';\r\nimport passwordManager from '../lib/mtproto/passwordManager';\r\nimport Page from './page';\r\nimport Button from '../components/button';\r\nimport PasswordInputField from '../components/passwordInputField';\r\nimport PasswordMonkey from '../components/monkeys/password';\r\nimport RichTextProcessor from '../lib/richtextprocessor';\r\nimport I18n from '../lib/langPack';\r\nimport LoginPage from './loginPage';\r\nimport { cancelEvent } from '../helpers/dom/cancelEvent';\r\nimport { attachClickEvent } from '../helpers/dom/clickEvent';\r\nimport htmlToSpan from '../helpers/dom/htmlToSpan';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\n\r\nconst TEST = false;\r\nlet passwordInput: HTMLInputElement;\r\n\r\nlet onFirstMount = (): Promise<any> => {\r\n  const page = new LoginPage({\r\n    className: 'page-password',\r\n    withInputWrapper: true,\r\n    titleLangKey: 'Login.Password.Title',\r\n    subtitleLangKey: 'Login.Password.Subtitle'\r\n  });\r\n\r\n  const btnNext = Button('btn-primary btn-color-primary');\r\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\r\n\r\n  btnNext.append(btnNextI18n.element);\r\n\r\n  const passwordInputField = new PasswordInputField({\r\n    label: 'LoginPassword',\r\n    name: 'password'\r\n  });\r\n\r\n  passwordInput = passwordInputField.input as HTMLInputElement;\r\n\r\n  page.inputWrapper.append(passwordInputField.container, btnNext);\r\n\r\n  let getStateInterval: number;\r\n\r\n  let getState = () => {\r\n    // * just to check session relevance\r\n    if(!getStateInterval) {\r\n      getStateInterval = window.setInterval(getState, 10e3);\r\n    }\r\n\r\n    return !TEST && passwordManager.getState().then(_state => {\r\n      state = _state;\r\n\r\n      if(state.hint) {\r\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\r\n      } else {\r\n        passwordInputField.setLabel();\r\n      }\r\n    });\r\n  };\r\n\r\n  let state: AccountPassword;\r\n  \r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(!passwordInput.value.length) {\r\n      passwordInput.classList.add('error');\r\n      return;\r\n    }\r\n\r\n    const toggle = toggleDisability([passwordInput, btnNext], true);\r\n    let value = passwordInput.value;\r\n\r\n    btnNextI18n.update({key: 'PleaseWait'});\r\n    const preloader = putPreloader(btnNext);\r\n\r\n    passwordManager.check(value, state).then((response) => {\r\n      //console.log('passwordManager response:', response);\r\n        \r\n      switch(response._) {\r\n        case 'auth.authorization':\r\n          clearInterval(getStateInterval);\r\n          import('./pageIm').then(m => {\r\n            m.default.mount();\r\n          });\r\n          if(monkey) monkey.remove();\r\n          break;\r\n        default:\r\n          btnNext.removeAttribute('disabled');\r\n          btnNextI18n.update({key: response._ as any});\r\n          preloader.remove();\r\n          break;\r\n      }\r\n    }).catch((err: any) => {\r\n      toggle();\r\n      passwordInputField.input.classList.add('error');\r\n      \r\n      switch(err.type) {\r\n        default:\r\n          //btnNext.innerText = err.type;\r\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\r\n          passwordInput.select();\r\n          break;\r\n      }\r\n\r\n      preloader.remove();\r\n  \r\n      getState();\r\n    });\r\n  };\r\n  \r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  passwordInput.addEventListener('keypress', function(this, e) {\r\n    this.classList.remove('error');\r\n    btnNextI18n.update({key: 'Login.Next'});\r\n\r\n    if(e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  const size = mediaSizes.isMobile ? 100 : 166;\r\n  const monkey = new PasswordMonkey(passwordInputField, size);\r\n  page.imageDiv.append(monkey.container);\r\n  return Promise.all([\r\n    monkey.load(),\r\n    getState()\r\n  ]);\r\n};\r\n\r\nconst page = new Page('page-password', true, onFirstMount, null, () => {\r\n  //if(!isAppleMobile) {\r\n    passwordInput.focus();\r\n  //}\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\r\n});\r\n\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function replaceContent(elem: HTMLElement, node: string | Node) {\r\n  if(typeof(node) === 'string') {\r\n    elem.innerHTML = node;\r\n    return;\r\n  }\r\n\r\n  // * children.length doesn't count text nodes\r\n  const firstChild = elem.firstChild;\r\n  if(firstChild) {\r\n    if(elem.lastChild === firstChild) {\r\n      firstChild.replaceWith(node);\r\n    } else {\r\n      elem.textContent = '';\r\n      elem.append(node);\r\n    }\r\n  } else {\r\n    elem.append(node);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport simulateEvent from \"../helpers/dom/dispatchEvent\";\r\nimport findUpAttribute from \"../helpers/dom/findUpAttribute\";\r\nimport getRichValue from \"../helpers/dom/getRichValue\";\r\nimport isInputEmpty from \"../helpers/dom/isInputEmpty\";\r\nimport selectElementContents from \"../helpers/dom/selectElementContents\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!findUpAttribute(e.target, 'contenteditable=\"true\"')) {\r\n      return;\r\n    }\r\n    //console.log('document paste');\r\n\r\n    //console.log('messageInput paste');\r\n\r\n    e.preventDefault();\r\n    // @ts-ignore\r\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n    let entities = RichTextProcessor.parseEntities(text);\r\n    //console.log('messageInput paste', text, entities);\r\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    //text = RichTextProcessor.wrapEmojiText(text);\r\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\r\n\r\n    // console.log('messageInput paste after', text);\r\n\r\n    // @ts-ignore\r\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\r\n\r\n    // @ts-ignore\r\n    //console.log('paste text', text, );\r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: true,\r\n  required?: boolean,\r\n  validate?: () => boolean\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  public required: boolean;\r\n  public validate: () => boolean;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  protected wasInputFakeClientHeight: number;\r\n  // protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    this.required = options.required;\r\n    this.validate = options.validate;\r\n\r\n    if(options.maxLength) {\r\n      options.showLengthOn = Math.min(40, Math.round(options.maxLength / 3));\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"true\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        this.wasInputFakeClientHeight = 0;\r\n        // this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input, false).value].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if(!this.value) { // * avoid selecting whole empty field on iOS devices\r\n      return;\r\n    }\r\n\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    } else {\r\n      selectElementContents(this.input);\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput() {\r\n    const {scrollHeight, clientHeight} = this.inputFake;\r\n    /* if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    } */\r\n\r\n    this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.height = scrollHeight ? scrollHeight + 'px' : '';\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input, false).value;\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    simulateEvent(this.input, 'input');\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isChanged() {\r\n    return this.value !== this.originalValue;\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && \r\n      this.isChanged() && \r\n      (!this.validate || this.validate()) && \r\n      (!this.required || !isInputEmpty(this.input));\r\n  }\r\n\r\n  public setDraftValue(value = '', silent = false) {\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n    this.setDraftValue(value, silent);\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","// https://stackoverflow.com/a/6150060\nexport default function selectElementContents(el: HTMLElement) {\n  const range = document.createRange();\n  range.selectNodeContents(el);\n  const sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { MessageEntity } from \"../../layer\";\r\nimport RichTextProcessor from \"../../lib/richtextprocessor\";\r\nimport getRichElementValue from \"./getRichElementValue\";\r\n\r\nexport default function getRichValue(field: HTMLElement, withEntities = true) {\r\n  const lines: string[] = [];\r\n  const line: string[] = [];\r\n\r\n  const entities: MessageEntity[] = withEntities ? [] : undefined;\r\n  getRichElementValue(field, lines, line, undefined, undefined, entities);\r\n  if(line.length) {\r\n    lines.push(line.join(''));\r\n  }\r\n\r\n  let value = lines.join('\\n');\r\n  value = value.replace(/\\u00A0/g, ' ');\r\n\r\n  if(entities) {\r\n    RichTextProcessor.combineSameEntities(entities);\r\n  }\r\n\r\n  //console.log('getRichValue:', value, entities);\r\n\r\n  return {value, entities};\r\n}\r\n\r\nMOUNT_CLASS_TO.getRichValue = getRichValue;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function toggleDisability(elements: HTMLElement[], disable: boolean) {\r\n  if(disable) {\r\n    elements.forEach(el => el.setAttribute('disabled', 'true'));\r\n  } else {\r\n    elements.forEach(el => el.removeAttribute('disabled'));\r\n  }\r\n\r\n  return () => toggleDisability(elements, !disable);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nexport type MarkdownType = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'monospace' | 'link' | 'mentionName';\r\nexport type MarkdownTag = {\r\n  match: string,\r\n  entityName: 'messageEntityBold' | 'messageEntityUnderline' | 'messageEntityItalic' | 'messageEntityPre' | 'messageEntityStrike' | 'messageEntityTextUrl' | 'messageEntityMentionName';\r\n};\r\nexport const markdownTags: {[type in MarkdownType]: MarkdownTag} = {\r\n  bold: {\r\n    match: '[style*=\"font-weight\"], b',\r\n    entityName: 'messageEntityBold'\r\n  },\r\n  underline: {\r\n    match: '[style*=\"underline\"], u',\r\n    entityName: 'messageEntityUnderline'\r\n  },\r\n  italic: {\r\n    match: '[style*=\"italic\"], i',\r\n    entityName: 'messageEntityItalic'\r\n  },\r\n  monospace: {\r\n    match: '[style*=\"monospace\"], [face=\"monospace\"], pre',\r\n    entityName: 'messageEntityPre'\r\n  },\r\n  strikethrough: {\r\n    match: '[style*=\"line-through\"], strike',\r\n    entityName: 'messageEntityStrike'\r\n  },\r\n  link: {\r\n    match: 'A:not(.follow)',\r\n    entityName: 'messageEntityTextUrl'\r\n  },\r\n  mentionName: {\r\n    match: 'A.follow',\r\n    entityName: 'messageEntityMentionName'\r\n  }\r\n};\r\n\r\nexport default function getRichElementValue(node: HTMLElement, lines: string[], line: string[], selNode?: Node, selOffset?: number, entities?: MessageEntity[], offset = {offset: 0}) {\r\n  if(node.nodeType === 3) { // TEXT\r\n    const nodeValue = node.nodeValue;\r\n\r\n    if(selNode === node) {\r\n      line.push(nodeValue.substr(0, selOffset) + '\\x01' + nodeValue.substr(selOffset));\r\n    } else {\r\n      line.push(nodeValue);\r\n    }\r\n\r\n    if(entities && nodeValue.trim()) {\r\n      if(node.parentNode) {\r\n        const parentElement = node.parentElement;\r\n        \r\n        for(const type in markdownTags) {\r\n          const tag = markdownTags[type as MarkdownType];\r\n          const closest = parentElement.closest(tag.match + ', [contenteditable]');\r\n          if(closest && closest.getAttribute('contenteditable') === null) {\r\n            if(tag.entityName === 'messageEntityTextUrl') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                url: (parentElement as HTMLAnchorElement).href,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            } else if(tag.entityName === 'messageEntityMentionName') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                offset: offset.offset,\r\n                length: nodeValue.length,\r\n                user_id: +parentElement.dataset.follow\r\n              });\r\n            } else {\r\n              entities.push({\r\n                _: tag.entityName as any,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    offset.offset += nodeValue.length;\r\n\r\n    return;\r\n  }\r\n\r\n  if(node.nodeType !== 1) { // NON-ELEMENT\r\n    return;\r\n  }\r\n\r\n  const isSelected = (selNode === node);\r\n  const isBlock = node.tagName === 'DIV' || node.tagName === 'P';\r\n  if(isBlock && line.length || node.tagName === 'BR') {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  } else if(node.tagName === 'IMG') {\r\n    const alt = (node as HTMLImageElement).alt;\r\n    if(alt) {\r\n      line.push(alt);\r\n      offset.offset += alt.length;\r\n    }\r\n  }\r\n\r\n  if(isSelected && !selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  let curChild = node.firstChild as HTMLElement;\r\n  while(curChild) {\r\n    getRichElementValue(curChild, lines, line, selNode, selOffset, entities, offset);\r\n    curChild = curChild.nextSibling as any;\r\n  }\r\n\r\n  if(isSelected && selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  if(isBlock && line.length) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpAttribute(el: any, attribute: string): HTMLElement {\r\n  return el.closest(`[${attribute}]`);\r\n  /* if(el.getAttribute(attribute) !== null) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.getAttribute(attribute) !== null) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport getRichValue from \"./getRichValue\";\r\n\r\nexport default function isInputEmpty(element: HTMLElement) {\r\n  if(element.hasAttribute('contenteditable') || element.tagName !== 'INPUT') {\r\n    /* const value = element.innerText;\r\n\r\n    return !value.trim() && !serializeNodes(Array.from(element.childNodes)).trim(); */\r\n    return !getRichValue(element, false).value.trim();\r\n  } else {\r\n    return !(element as HTMLInputElement).value.trim();\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { LangPackKey, i18n } from \"../lib/langPack\";\r\n\r\nexport default class LoginPage {\r\n  public element: HTMLElement;\r\n  public container: HTMLElement;\r\n  public imageDiv: HTMLElement;\r\n  public inputWrapper: HTMLElement;\r\n  public title: HTMLElement;\r\n  public subtitle: HTMLParagraphElement;\r\n\r\n  constructor(options: {\r\n    className: string,\r\n    withInputWrapper?: boolean,\r\n    titleLangKey?: LangPackKey,\r\n    subtitleLangKey?: LangPackKey,\r\n  }) {\r\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\r\n    //this.element = document.createElement('div');\r\n    //this.element.className = 'page-' + options.className;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'container center-align';\r\n\r\n    this.imageDiv = document.createElement('div');\r\n    this.imageDiv.className = 'auth-image';\r\n\r\n    this.title = document.createElement('h4');\r\n    if(options.titleLangKey) {\r\n      this.title.append(i18n(options.titleLangKey));\r\n    }\r\n\r\n    this.subtitle = document.createElement('p');\r\n    this.subtitle.className = 'subtitle';\r\n    if(options.subtitleLangKey) {\r\n      this.subtitle.append(i18n(options.subtitleLangKey));\r\n    }\r\n    \r\n    this.container.append(this.imageDiv, this.title, this.subtitle);\r\n\r\n    if(options.withInputWrapper) {\r\n      this.inputWrapper = document.createElement('div');\r\n      this.inputWrapper.className = 'input-wrapper';\r\n      this.container.append(this.inputWrapper);\r\n    }\r\n\r\n    this.element.append(this.container);\r\n  }\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { HelpCountry, HelpCountryCode } from \"../layer\";\nimport I18n from \"../lib/langPack\";\n\nlet sortedCountries: HelpCountry[];\ntype PrefixCountry = {country: HelpCountry, code: HelpCountryCode};\nconst prefixes: Map<string, PrefixCountry> = new Map();\nlet maxPrefixLength = 0;\nconst setPrefix = (country: HelpCountry, code: HelpCountryCode, prefix: string = '') => {\n  prefix = code.country_code + prefix;\n  /* if(prefixes.has(prefix)) {\n    console.error('asdasdasd', prefixes.get(prefix), country, code);\n  } */\n  maxPrefixLength = Math.max(maxPrefixLength, prefix.length);\n  prefixes.set(prefix, {country, code});\n};\n\nexport function formatPhoneNumber(originalStr: string): {\n  formatted: string,\n  country: HelpCountry,\n  code: HelpCountryCode,\n  leftPattern: string\n} {\n  if(!prefixes.size) {\n    I18n.countriesList.forEach(country => {\n      country.country_codes.forEach(code => {\n        const s = {country, code};\n\n        if(code.prefixes) {\n          code.prefixes.forEach(prefix => {\n            setPrefix(country, code, prefix);\n          });\n        } else {\n          setPrefix(country, code);\n        }\n      });\n    });\n  }\n\n  // return {formatted: originalStr, country: undefined as any, leftPattern: ''};\n  let str = originalStr.replace(/\\D/g, '');\n  let phoneCode = str.slice(0, maxPrefixLength);\n  \n  ////console.log('str', str, phoneCode);\n  // if(!sortedCountries) {\n  //   sortedCountries = I18n.countriesList.slice().sort((a, b) => b.country_codes[0].country_code.length - a.country_codes[0].country_code.length);\n  // }\n  \n  // let country = sortedCountries.find((c) => {\n  //   return c.country_codes.find((c) => phoneCode.indexOf(c.replace(/\\D/g, '')) === 0);\n  // });\n\n  let prefixCountry: PrefixCountry;\n  for(let i = phoneCode.length - 1; i >= 0; --i) { // lookup for country by prefix\n    prefixCountry = prefixes.get(phoneCode.slice(0, i + 1));\n    if(prefixCountry) {\n      break;\n    }\n  }\n\n  if(!prefixCountry) {\n    return {\n      formatted: str, \n      country: undefined, \n      code: undefined, \n      leftPattern: ''\n    };\n  }\n\n  // country = /* PhoneCodesMain[country.phoneCode] ||  */country;\n  const country = prefixCountry.country;\n  \n  const patterns = prefixCountry.code.patterns || [];\n  const searchForPattern = str.slice(prefixCountry.code.country_code.length); // splice country code\n  let pattern = '', mostMatchedPatternMatches = 0, mostMatchedPattern = '';\n  for(let i = patterns.length - 1; i >= 0; --i) {\n    pattern = patterns[i];\n\n    const _pattern = pattern.replace(/ /g, '');\n    let patternMatches = 0;\n    for(let k = 0, length = Math.min(searchForPattern.length, _pattern.length); k < length; ++k) {\n      if(searchForPattern[k] === _pattern[k] || _pattern[k] === 'X') {\n        ++patternMatches;\n      } else {\n        patternMatches = 0;\n        break;\n      }\n    }\n\n    if(patternMatches > mostMatchedPatternMatches) {\n      mostMatchedPatternMatches = patternMatches;\n      mostMatchedPattern = pattern;\n    }\n  }\n\n  pattern = mostMatchedPattern || pattern;\n  pattern = pattern.replace(/\\d/g, 'X');\n\n  pattern = prefixCountry.code.country_code + ' ' + pattern;\n  // let pattern = country.pattern || country.phoneCode;\n  pattern.split('').forEach((symbol, idx) => {\n    if(symbol === ' ' && str[idx] !== ' ' && str.length > idx) {\n      str = str.slice(0, idx) + ' ' + str.slice(idx);\n    }\n  });\n  \n  /* if(country.pattern) {\n    str = str.slice(0, country.pattern.length);\n  } */\n\n  let leftPattern = pattern && pattern.length > str.length ? pattern.slice(str.length) : '';\n  if(leftPattern) {\n    /* const length = str.length;\n    leftPattern = leftPattern.split('').map((_, idx) => (length + idx).toString().slice(-1)).join(''); */\n    leftPattern = leftPattern.replace(/X/g, '‒');\n    // leftPattern = leftPattern.replace(/X/g, '0');\n  }\n  \n  return {formatted: str, country, code: prefixCountry.code, leftPattern};\n}\n"],"sourceRoot":""}