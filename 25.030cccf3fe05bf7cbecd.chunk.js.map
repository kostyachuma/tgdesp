{"version":3,"sources":["webpack:///./src/helpers/formatPhoneNumber.ts"],"names":["prefixes","Map","maxPrefixLength","setPrefix","country","code","prefix","country_code","Math","max","length","set","formatPhoneNumber","originalStr","size","countriesList","forEach","country_codes","prefixCountry","str","replace","phoneCode","slice","i","get","formatted","undefined","leftPattern","patterns","searchForPattern","pattern","mostMatchedPatternMatches","mostMatchedPattern","_pattern","patternMatches","k","min","split","symbol","idx"],"mappings":"sFAAA,8CAWA,MAAMA,EAAuC,IAAIC,IACjD,IAAIC,EAAkB,EACtB,MAAMC,EAAY,CAACC,EAAsBC,EAAuBC,EAAiB,MAC/EA,EAASD,EAAKE,aAAeD,EAI7BJ,EAAkBM,KAAKC,IAAIP,EAAiBI,EAAOI,QACnDV,EAASW,IAAIL,EAAQ,CAACF,UAASC,UAG1B,SAASO,EAAkBC,GAM5Bb,EAASc,MACX,UAAKC,cAAcC,QAAQZ,IACzBA,EAAQa,cAAcD,QAAQX,IAGzBA,EAAKL,SACNK,EAAKL,SAASgB,QAAQV,IACpBH,EAAUC,EAASC,EAAMC,KAG3BH,EAAUC,EAASC,OAO3B,IAYIa,EAZAC,EAAMN,EAAYO,QAAQ,MAAO,IACjCC,EAAYF,EAAIG,MAAM,EAAGpB,GAY7B,IAAI,IAAIqB,EAAIF,EAAUX,OAAS,EAAGa,GAAK,IACrCL,EAAgBlB,EAASwB,IAAIH,EAAUC,MAAM,EAAGC,EAAI,KACjDL,KAFuCK,GAO5C,IAAIL,EACF,MAAO,CACLO,UAAWN,EACXf,aAASsB,EACTrB,UAAMqB,EACNC,YAAa,IAKjB,MAAMvB,EAAUc,EAAcd,QAExBwB,EAAWV,EAAcb,KAAKuB,UAAY,GAC1CC,EAAmBV,EAAIG,MAAMJ,EAAcb,KAAKE,aAAaG,QACnE,IAAIoB,EAAU,GAAIC,EAA4B,EAAGC,EAAqB,GACtE,IAAI,IAAIT,EAAIK,EAASlB,OAAS,EAAGa,GAAK,IAAKA,EAAG,CAC5CO,EAAUF,EAASL,GAEnB,MAAMU,EAAWH,EAAQV,QAAQ,KAAM,IACvC,IAAIc,EAAiB,EACrB,IAAI,IAAIC,EAAI,EAAGzB,EAASF,KAAK4B,IAAIP,EAAiBnB,OAAQuB,EAASvB,QAASyB,EAAIzB,IAAUyB,EAAG,CAC3F,GAAGN,EAAiBM,KAAOF,EAASE,IAAsB,MAAhBF,EAASE,GAE5C,CACLD,EAAiB,EACjB,QAHEA,EAOHA,EAAiBH,IAClBA,EAA4BG,EAC5BF,EAAqBF,GAIzBA,EAAUE,GAAsBF,EAChCA,EAAUA,EAAQV,QAAQ,MAAO,KAEjCU,EAAUZ,EAAcb,KAAKE,aAAe,IAAMuB,EAElDA,EAAQO,MAAM,IAAIrB,QAAQ,CAACsB,EAAQC,KACnB,MAAXD,GAA+B,MAAbnB,EAAIoB,IAAgBpB,EAAIT,OAAS6B,IACpDpB,EAAMA,EAAIG,MAAM,EAAGiB,GAAO,IAAMpB,EAAIG,MAAMiB,MAQ9C,IAAIZ,EAAcG,GAAWA,EAAQpB,OAASS,EAAIT,OAASoB,EAAQR,MAAMH,EAAIT,QAAU,GAQvF,OAPGiB,IAGDA,EAAcA,EAAYP,QAAQ,KAAM,MAInC,CAACK,UAAWN,EAAKf,UAASC,KAAMa,EAAcb,KAAMsB","file":"25.030cccf3fe05bf7cbecd.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { HelpCountry, HelpCountryCode } from \"../layer\";\nimport I18n from \"../lib/langPack\";\n\nlet sortedCountries: HelpCountry[];\ntype PrefixCountry = {country: HelpCountry, code: HelpCountryCode};\nconst prefixes: Map<string, PrefixCountry> = new Map();\nlet maxPrefixLength = 0;\nconst setPrefix = (country: HelpCountry, code: HelpCountryCode, prefix: string = '') => {\n  prefix = code.country_code + prefix;\n  /* if(prefixes.has(prefix)) {\n    console.error('asdasdasd', prefixes.get(prefix), country, code);\n  } */\n  maxPrefixLength = Math.max(maxPrefixLength, prefix.length);\n  prefixes.set(prefix, {country, code});\n};\n\nexport function formatPhoneNumber(originalStr: string): {\n  formatted: string,\n  country: HelpCountry,\n  code: HelpCountryCode,\n  leftPattern: string\n} {\n  if(!prefixes.size) {\n    I18n.countriesList.forEach(country => {\n      country.country_codes.forEach(code => {\n        const s = {country, code};\n\n        if(code.prefixes) {\n          code.prefixes.forEach(prefix => {\n            setPrefix(country, code, prefix);\n          });\n        } else {\n          setPrefix(country, code);\n        }\n      });\n    });\n  }\n\n  // return {formatted: originalStr, country: undefined as any, leftPattern: ''};\n  let str = originalStr.replace(/\\D/g, '');\n  let phoneCode = str.slice(0, maxPrefixLength);\n  \n  ////console.log('str', str, phoneCode);\n  // if(!sortedCountries) {\n  //   sortedCountries = I18n.countriesList.slice().sort((a, b) => b.country_codes[0].country_code.length - a.country_codes[0].country_code.length);\n  // }\n  \n  // let country = sortedCountries.find((c) => {\n  //   return c.country_codes.find((c) => phoneCode.indexOf(c.replace(/\\D/g, '')) === 0);\n  // });\n\n  let prefixCountry: PrefixCountry;\n  for(let i = phoneCode.length - 1; i >= 0; --i) { // lookup for country by prefix\n    prefixCountry = prefixes.get(phoneCode.slice(0, i + 1));\n    if(prefixCountry) {\n      break;\n    }\n  }\n\n  if(!prefixCountry) {\n    return {\n      formatted: str, \n      country: undefined, \n      code: undefined, \n      leftPattern: ''\n    };\n  }\n\n  // country = /* PhoneCodesMain[country.phoneCode] ||  */country;\n  const country = prefixCountry.country;\n  \n  const patterns = prefixCountry.code.patterns || [];\n  const searchForPattern = str.slice(prefixCountry.code.country_code.length); // splice country code\n  let pattern = '', mostMatchedPatternMatches = 0, mostMatchedPattern = '';\n  for(let i = patterns.length - 1; i >= 0; --i) {\n    pattern = patterns[i];\n\n    const _pattern = pattern.replace(/ /g, '');\n    let patternMatches = 0;\n    for(let k = 0, length = Math.min(searchForPattern.length, _pattern.length); k < length; ++k) {\n      if(searchForPattern[k] === _pattern[k] || _pattern[k] === 'X') {\n        ++patternMatches;\n      } else {\n        patternMatches = 0;\n        break;\n      }\n    }\n\n    if(patternMatches > mostMatchedPatternMatches) {\n      mostMatchedPatternMatches = patternMatches;\n      mostMatchedPattern = pattern;\n    }\n  }\n\n  pattern = mostMatchedPattern || pattern;\n  pattern = pattern.replace(/\\d/g, 'X');\n\n  pattern = prefixCountry.code.country_code + ' ' + pattern;\n  // let pattern = country.pattern || country.phoneCode;\n  pattern.split('').forEach((symbol, idx) => {\n    if(symbol === ' ' && str[idx] !== ' ' && str.length > idx) {\n      str = str.slice(0, idx) + ' ' + str.slice(idx);\n    }\n  });\n  \n  /* if(country.pattern) {\n    str = str.slice(0, country.pattern.length);\n  } */\n\n  let leftPattern = pattern && pattern.length > str.length ? pattern.slice(str.length) : '';\n  if(leftPattern) {\n    /* const length = str.length;\n    leftPattern = leftPattern.split('').map((_, idx) => (length + idx).toString().slice(-1)).join(''); */\n    leftPattern = leftPattern.replace(/X/g, 'â€’');\n    // leftPattern = leftPattern.replace(/X/g, '0');\n  }\n  \n  return {formatted: str, country, code: prefixCountry.code, leftPattern};\n}\n"],"sourceRoot":""}