{"version":3,"sources":["webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/helpers/cleanSearchText.ts","webpack:///./src/lib/mtproto/mtproto_config.ts","webpack:///./src/helpers/cleanUsername.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/helpers/array.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/lib/searchIndex.ts","webpack:///./src/helpers/assumeType.ts"],"names":["htmlToSpan","html","span","document","createElement","innerHTML","badCharsRe","trimRe","clearBadCharsAndTrim","text","replace","latinizeString","ch","latinizeCh","LatinizeMap","undefined","cleanSearchText","latinize","hasTag","charAt","toLowerCase","processSearchText","options","includeTag","clearBadChars","ignoreCase","REPLIES_PEER_ID","SERVICE_PEER_ID","MUTE_UNTIL","cleanUsername","username","appUsersManager","storage","appStateManager","storages","users","updateUsersStatuses","timestampNow","i","this","user","updateUserStatus","clear","setInterval","rootScope","addEventListener","addMultipleEventsListeners","update","userId","user_id","status","expires","serverTimeManager","serverTimeOffset","was_online","dispatchEvent","setUserToStateIfNeeded","updateUserPhoto","forceUserOnline","photo","_","console","warn","updateUserName","saveApiUser","Object","assign","first_name","last_name","e","getSelf","id","contactsIndex","indexObject","getUserSearchText","getState","then","state","storagesResults","length","contactsList","Array","isArray","forEach","pushContact","contactsFillPromise","resolve","peerId","getFromCache","set","getUser","delete","init","usernames","_userId","isPeerNeeded","findAndSplice","getTopPeersPromises","createSearchIndex","Set","updatedContactsList","pushToState","cached","isFulfilled","promise","invokeApi","result","saveApiUsers","contacts","contact","onContactsModified","slice","Promise","resolvedPeer","appChatsManager","saveApiChats","chats","appPeersManager","getPeer","getPeerId","peer","add","requestPeer","phone","pFlags","self","format","filter","Boolean","join","query","includeSaved","sortBy","fillContacts","_contactsList","results","search","has","sort","userId1","userId2","sortName1","sortName","sortName2","localeCompare","status1","getUserStatusForSort","p","myId","testSelfSearch","unshift","block","invokeApiSingle","getInputPeerById","value","apiUpdatesManager","processLocalUpdate","peer_id","getOutputPeer","blocked","index","apiUsers","override","oldUser","min","oldSearchUsername","searchUsername","initials","fullName","deleted","getAbbreviation","changedPhoto","changedTitle","photo_id","wasContact","newContact","onContactUpdated","formatPhoneNumber","formatted","access_hash","key","args","isBot","support","date","now","Date","d","getDate","getMonth","getHours","getMinutes","bot","isRegularUser","isContact","allowMin","phone_number","vcard","eventTimestamp","timestamp","updatesState","syncLoading","importContacts","phones","userIds","error","Error","type","inputContacts","j","push","client_id","toString","importedContactsResult","imported","map","importedContact","topPeersCache","cachedTime","peers","offset","limit","hash","topPeers","categories","topPeer","rating","contactsBlocked","count","peerIds","u","concat","c","invokeApiCacheable","q","cacheSeconds","my_results","curIsContact","offline","showPhone","getUserInput","add_phone_privacy_exception","updates","processUpdateMessage","DialogColorsFg","DialogColors","DialogColorsMap","hasRights","getUserPhoto","getChatPhoto","chat","getChat","migrated_to","deactivated","plainText","onlyFirstName","title","trim","split","wrapEmojiText","chatId","isChannel","channel_id","chat_id","getUserString","getChatString","isUser","peerParams","substr","isMegagroup","isBroadcast","ignorePeerId","getChannelInputPeer","getChatInputPeer","pic","getDialogType","onChatUpdated","updateChannelParticipant","clearCache","params","channel","updateChatDefaultBannedRights","default_banned_rights","_chatId","apiChats","saveApiChat","oldChat","participants_count","rights","defaultRights","action","isThread","creator","kicked","left","megagroup","admin_rights","banned_rights","myFlags","post_messages","delete_messages","broadcast","until_date","bind","good","about","channelId","input","getChannelInput","usersInputs","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","find","bool","inputFile","inputChatPhoto","file","participant","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","keys","kicked_by","editBanned","view_messages","messagesChats","enabled","migrateChat","accumulate","arr","initialValue","reduce","acc","findAndSpliceAll","array","verify","out","idx","findIndex","splice","forEachReverse","callback","insertInDescendSortedArray","element","property","pos","sortProperty","indexOf","prev","next","len","filterUnique","pendingPtsUpdates","pendingSeqUpdates","syncPending","channelStates","attached","log","Warn","Log","debug","updateMessage","processOpts","seq","seqStart","seq_start","forceGetDifference","processUpdate","isOut","fromId","from_id","toId","message","fwd_from","reply_to","entities","pts","pts_count","Proxy","target","saveUpdatesState","us","nextSeq","pendingUpdatesData","saveUpdate","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","clearTimeout","timeout","curState","getChannelState","a","b","curPts","goodPts","goodIndex","getDifference","first","wasSyncing","pts_total_limit","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","addChannelState","lastPtsUpdateTime","toPeerId","fwdHeader","reason","hasUser","post","hasChat","popPts","popSeq","window","setTimeout","popPendingPtsUpdate","_state","noErrorBox","stateResult","setUpdatesProcessor","setProxy","SearchIndex","minChars","fullTexts","Map","searchText","newFoundObjs","queryWords","queryWordsLength","fullText","what","found","foundChars","word","fullTextLength","o","assumeType","x"],"mappings":"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","file":"3.54ecd3987d4e47164aa1.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport Config from \"../lib/config\";\n\nconst badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\nconst trimRe = /^\\s+|\\s$/g;\n\nexport function clearBadCharsAndTrim(text: string) {\n  return text.replace(badCharsRe, '').replace(trimRe, '');\n}\n\nexport function latinizeString(text: string) {\n  return text.replace(/[^A-Za-z0-9]/g, (ch) => {\n    const latinizeCh = Config.LatinizeMap[ch];\n    return latinizeCh !== undefined ? latinizeCh : ch;\n  });\n}\n\nexport default function cleanSearchText(text: string, latinize = true) {\n  const hasTag = text.charAt(0) === '%';\n  text = clearBadCharsAndTrim(text);\n  if(latinize) text = latinizeString(text);\n  \n  text = text.toLowerCase();\n  if(hasTag) text = '%' + text;\n\n  return text;\n}\n\nexport type ProcessSearchTextOptions = Partial<{\n  clearBadChars: boolean,\n  latinize: boolean,\n  ignoreCase: boolean,\n  includeTag: boolean\n}>;\n\nexport function processSearchText(text: string, options: ProcessSearchTextOptions = {}) {\n  const hasTag = options.includeTag && text.charAt(0) === '%';\n  if(options.clearBadChars) text = clearBadCharsAndTrim(text);\n  if(options.latinize) text = latinizeString(text);\n  if(options.ignoreCase) text = text.toLowerCase();\n  if(hasTag) text = '%' + text;\n  return text;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/**\r\n * Legacy Webogram's format, don't change dcID to camelCase. date is timestamp\r\n */\r\nexport type UserAuth = {dcID: number | string, date: number, id: number};\r\n\r\nexport const REPLIES_PEER_ID = 1271266957;\r\nexport const SERVICE_PEER_ID = 777000;\r\nexport const MUTE_UNTIL = 0x7FFFFFFF;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport default function cleanUsername(username: string) {\r\n  return username && username.toLowerCase() || '';\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { filterUnique } from \"../../helpers/array\";\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\nimport cleanSearchText from \"../../helpers/cleanSearchText\";\nimport cleanUsername from \"../../helpers/cleanUsername\";\nimport { tsNow } from \"../../helpers/date\";\nimport { formatPhoneNumber } from \"../../helpers/formatPhoneNumber\";\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\nimport { Chat, InputContact, InputMedia, InputUser, User as MTUser, UserProfilePhoto, UserStatus } from \"../../layer\";\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\n//import apiManager from '../mtproto/apiManager';\nimport apiManager from '../mtproto/mtprotoworker';\nimport { REPLIES_PEER_ID, SERVICE_PEER_ID } from \"../mtproto/mtproto_config\";\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport SearchIndex from \"../searchIndex\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\n\nexport type User = MTUser.user;\nexport type TopPeerType = 'correspondents' | 'bots_inline';\nexport type MyTopPeer = {id: number, rating: number};\n\nexport class AppUsersManager {\n  private storage = appStateManager.storages.users;\n  \n  private users: {[userId: number]: User};\n  private usernames: {[username: string]: number};\n  private contactsIndex: SearchIndex<number>;\n  private contactsFillPromise: CancellablePromise<Set<number>>;\n  private contactsList: Set<number>;\n  private updatedContactsList: boolean;\n  \n  private getTopPeersPromises: {[type in TopPeerType]?: Promise<MyTopPeer[]>};\n\n  constructor() {\n    this.clear(true);\n\n    setInterval(this.updateUsersStatuses, 60000);\n\n    rootScope.addEventListener('state_synchronized', this.updateUsersStatuses);\n\n    rootScope.addMultipleEventsListeners({\n      updateUserStatus: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          user.status = update.status;\n          if(user.status) {\n            if('expires' in user.status) {\n              user.status.expires -= serverTimeManager.serverTimeOffset;\n            }\n\n            if('was_online' in user.status) {\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\n            }\n          }\n\n          //user.sortStatus = this.getUserStatusForSort(user.status);\n          rootScope.dispatchEvent('user_update', userId);\n          this.setUserToStateIfNeeded(user);\n        } //////else console.warn('No user by id:', userId);\n      },\n\n      updateUserPhoto: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          this.forceUserOnline(userId);\n\n          if(update.photo._ === 'userProfilePhotoEmpty') {\n            delete user.photo;\n          } else {\n            user.photo = safeReplaceObject(user.photo, update.photo);\n          }\n\n          this.setUserToStateIfNeeded(user);\n\n          rootScope.dispatchEvent('user_update', userId);\n          rootScope.dispatchEvent('avatar_update', userId);\n        } else console.warn('No user by id:', userId);\n      },\n\n      updateUserName: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          this.forceUserOnline(userId);\n          \n          this.saveApiUser(Object.assign({}, user, {\n            first_name: update.first_name,\n            last_name: update.last_name,\n            username: update.username\n          }), true);\n        }\n      }\n    });\n\n    /* case 'updateContactLink':\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\n    break; */\n\n    rootScope.addEventListener('language_change', (e) => {\n      const userId = this.getSelf().id;\n      this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\n    });\n\n    appStateManager.getState().then((state) => {\n      const users = appStateManager.storagesResults.users;\n      if(users.length) {\n        for(let i = 0, length = users.length; i < length; ++i) {\n          const user = users[i];\n          if(user) {\n            this.users[user.id] = user;\n          }\n        }\n      }\n\n      const contactsList = state.contactsList;\n      if(contactsList && Array.isArray(contactsList)) {\n        contactsList.forEach(userId => {\n          this.pushContact(userId);\n        });\n\n        if(contactsList.length) {\n          this.contactsFillPromise = deferredPromise();\n          this.contactsFillPromise.resolve(this.contactsList);\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\n        if(peerId < 0 || this.storage.getFromCache(peerId)) {\n          return;\n        }\n\n        this.storage.set({\n          [peerId]: this.getUser(peerId)\n        });\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\n        if(peerId < 0 || !this.storage.getFromCache(peerId)) {\n          return;\n        }\n\n        this.storage.delete(peerId);\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const users = appStateManager.storagesResults.users;\n      for(const _userId in this.users) {\n        const userId = +_userId;\n        if(!userId) continue;\n        if(!appStateManager.isPeerNeeded(userId)) {\n          const user = this.users[userId];\n          if(user.username) {\n            delete this.usernames[cleanUsername(user.username)];\n          }\n\n          users.findAndSplice((user) => user.id === userId);\n          this.storage.delete(userId);\n          delete this.users[userId];\n        }\n      }\n    } else {\n      this.users = {};\n      this.usernames = {};\n    }\n    \n    this.getTopPeersPromises = {};\n    this.contactsIndex = this.createSearchIndex();\n    this.contactsFillPromise = undefined;\n    this.contactsList = new Set();\n    this.updatedContactsList = false;\n  }\n\n  private onContactsModified() {\n    const contactsList = [...this.contactsList];\n    appStateManager.pushToState('contactsList', contactsList);\n  }\n\n  public fillContacts() {\n    if(this.contactsFillPromise && this.updatedContactsList) {\n      return {\n        cached: this.contactsFillPromise.isFulfilled,\n        promise: this.contactsFillPromise\n      };\n    }\n\n    this.updatedContactsList = true;\n\n    const promise = deferredPromise<Set<number>>();\n    apiManager.invokeApi('contacts.getContacts').then((result) => {\n      if(result._ === 'contacts.contacts') {\n        this.contactsList.clear();\n      \n        this.saveApiUsers(result.users);\n\n        result.contacts.forEach((contact) => {\n          this.pushContact(contact.user_id);\n        });\n\n        this.onContactsModified();\n\n        this.contactsFillPromise = promise;\n      }\n\n      promise.resolve(this.contactsList);\n    }, () => {\n      this.updatedContactsList = false;\n    });\n\n    return {\n      cached: this.contactsFillPromise?.isFulfilled,\n      promise: this.contactsFillPromise || (this.contactsFillPromise = promise)\n    };\n  }\n\n  public resolveUsername(username: string): Promise<Chat | User> {\n    if(username[0] === '@') {\n      username = username.slice(1);\n    }\n\n    username = username.toLowerCase();\n    if(this.usernames[username]) {\n      return Promise.resolve(this.users[this.usernames[username]]);\n    }\n\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\n      this.saveApiUsers(resolvedPeer.users);\n      appChatsManager.saveApiChats(resolvedPeer.chats);\n\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\n    });\n  }\n\n  public pushContact(userId: number) {\n    this.contactsList.add(userId);\n    this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\n    appStateManager.requestPeer(userId, 'contacts');\n  }\n\n  public getUserSearchText(id: number) {\n    const user = this.users[id];\n    if(!user) {\n      return '';\n    }\n\n    const arr: string[] = [\n      user.first_name,\n      user.last_name,\n      user.phone,\n      user.username,\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\n      user.pFlags.self ? 'Saved Messages' : ''\n    ];\n\n    return arr.filter(Boolean).join(' ');\n  }\n\n  public getContacts(query?: string, includeSaved = false, sortBy: 'name' | 'online' | 'none' = 'name') {\n    return this.fillContacts().promise.then(_contactsList => {\n      let contactsList = [..._contactsList];\n      if(query) {\n        const results = this.contactsIndex.search(query);\n        const filteredContactsList = [...contactsList].filter(id => results.has(id));\n\n        contactsList = filteredContactsList;\n      }\n\n      if(sortBy === 'name') {\n        contactsList.sort((userId1, userId2) => {\n          const sortName1 = (this.users[userId1] || {}).sortName || '';\n          const sortName2 = (this.users[userId2] || {}).sortName || '';\n          return sortName1.localeCompare(sortName2);\n        });\n      } else if(sortBy === 'online') {\n        contactsList.sort((userId1, userId2) => {\n          const status1 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId1).status);\n          const status2 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId2).status);\n          return status2 - status1;\n        });\n      }\n\n      contactsList.findAndSplice(p => p === rootScope.myId);\n      if(includeSaved) {\n        if(this.testSelfSearch(query)) {\n          contactsList.unshift(rootScope.myId);\n        }\n      }\n\n      return contactsList;\n    });\n  }\n\n  public toggleBlock(peerId: number, block: boolean) {\n    return apiManager.invokeApiSingle(block ? 'contacts.block' : 'contacts.unblock', {\n      id: appPeersManager.getInputPeerById(peerId)\n    }).then(value => {\n      if(value) {\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updatePeerBlocked',\n          peer_id: appPeersManager.getOutputPeer(peerId),\n          blocked: block\n        });\n      }\n\n      return value;\n    });\n  }\n\n  public testSelfSearch(query: string) {\n    const user = this.getSelf();\n    const index = this.createSearchIndex();\n    index.indexObject(user.id, this.getUserSearchText(user.id));\n    return index.search(query).has(user.id);\n  }\n\n  private createSearchIndex() {\n    return new SearchIndex<number>({\n      clearBadChars: true,\n      ignoreCase: true,\n      latinize: true,\n      includeTag: true\n    });\n  }\n\n  public saveApiUsers(apiUsers: MTUser[], override?: boolean) {\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\n  }\n\n  public saveApiUser(user: MTUser, override?: boolean) {\n    if(user._ === 'userEmpty') return;\n\n    const userId = user.id;\n    const oldUser = this.users[userId];\n\n    // ! commented block can affect performance !\n    // if(oldUser && !override) {\n    //   console.log('saveApiUser same');\n    //   return;\n    // }\n\n    if(user.pFlags === undefined) {\n      user.pFlags = {};\n    }\n\n    if(user.pFlags.min && oldUser !== undefined) {\n      return;\n    }\n\n    // * exclude from state\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\n\n    if(!oldUser || oldUser.username !== user.username) {\n      if(oldUser?.username) {\n        const oldSearchUsername = cleanUsername(oldUser.username);\n        delete this.usernames[oldSearchUsername];\n      }\n\n      if(user.username) {\n        const searchUsername = cleanUsername(user.username);\n        this.usernames[searchUsername] = userId;\n      }\n    }\n\n    if(!oldUser \n      || oldUser.initials === undefined \n      || oldUser.sortName === undefined \n      || oldUser.first_name !== user.first_name \n      || oldUser.last_name !== user.last_name) {\n      const fullName = user.first_name + (user.last_name ? ' ' + user.last_name : '');\n\n      user.sortName = user.pFlags.deleted ? '' : cleanSearchText(fullName, false);  \n      user.initials = RichTextProcessor.getAbbreviation(fullName);\n    } else {\n      user.sortName = oldUser.sortName;\n      user.initials = oldUser.initials;\n    }\n\n    if(user.status) {\n      if((user.status as UserStatus.userStatusOnline).expires) {\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\n      }\n\n      if((user.status as UserStatus.userStatusOffline).was_online) {\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\n      }\n    }\n\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldUser === undefined) {\n      this.users[userId] = user;\n    } else {\n      if(user.first_name !== oldUser.first_name \n        || user.last_name !== oldUser.last_name \n        || user.username !== oldUser.username) {\n        changedTitle = true;\n      }\n\n      const oldPhotoId = (oldUser.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      const newPhotoId = (user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      /* if(user.pFlags.bot && user.bot_info_version !== oldUser.bot_info_version) {\n        \n      } */\n\n      const wasContact = !!oldUser.pFlags.contact;\n      const newContact = !!user.pFlags.contact;\n\n      safeReplaceObject(oldUser, user);\n      rootScope.dispatchEvent('user_update', userId);\n\n      if(wasContact !== newContact) {\n        this.onContactUpdated(userId, newContact, wasContact);\n      }\n    }\n\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', user.id);\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', user.id);\n    }\n\n    this.setUserToStateIfNeeded(user);\n  }\n\n  public setUserToStateIfNeeded(user: User) {\n    if(appStateManager.isPeerNeeded(user.id)) {\n      this.storage.set({\n        [user.id]: user\n      });\n    }\n  }\n\n  public formatUserPhone(phone: string) {\n    return '+' + formatPhoneNumber(phone).formatted;\n  }\n\n  public isUserOnlineVisible(id: number) {\n    return this.getUserStatusForSort(id) > 3;\n  }\n\n  public getUserStatusForSort(status: User['status'] | number) {\n    if(typeof(status) === 'number') {\n      status = this.getUser(status).status;\n    }\n\n    if(status) {\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\n      if(expires) {\n        return expires;\n      }\n\n      /* const timeNow = tsNow(true);\n      switch(status._) {\n        case 'userStatusRecently':\n          return timeNow - 86400 * 3;\n        case 'userStatusLastWeek':\n          return timeNow - 86400 * 7;\n        case 'userStatusLastMonth':\n          return timeNow - 86400 * 30;\n      } */\n      switch(status._) {\n        case 'userStatusRecently':\n          return 3;\n        case 'userStatusLastWeek':\n          return 2;\n        case 'userStatusLastMonth':\n          return 1;\n      }\n    }\n\n    return 0;\n  }\n\n  public getUser(id: any): User {\n    if(isObject(id)) {\n      return id;\n    }\n\n    return this.users[id] || {id: id, pFlags: {deleted: true}, access_hash: ''} as User;\n  }\n\n  public getSelf() {\n    return this.getUser(rootScope.myId);\n  }\n\n  public getUserStatusString(userId: number): HTMLElement {\n    let key: LangPackKey;\n    let args: any[];\n\n    switch(userId) {\n      case REPLIES_PEER_ID:\n        key = 'Peer.RepliesNotifications';\n        break;\n      case SERVICE_PEER_ID:\n        key = 'Peer.ServiceNotifications';\n        break;\n      default: {\n        if(this.isBot(userId)) {\n          key = 'Bot';\n          break;\n        }\n\n        const user = this.getUser(userId);\n        if(!user) {\n          key = '' as any;\n          break;\n        }\n\n        if(user.pFlags.support) {\n          key = 'SupportStatus';\n          break;\n        }\n\n        switch(user.status?._) {\n          case 'userStatusRecently': {\n            key = 'Lately';\n            break;\n          }\n    \n          case 'userStatusLastWeek': {\n            key = 'WithinAWeek';\n            break;\n          }\n    \n          case 'userStatusLastMonth': {\n            key = 'WithinAMonth';\n            break;\n          }\n          \n          case 'userStatusOffline': {\n            const date = user.status.was_online;\n            const now = Date.now() / 1000;\n            \n            if((now - date) < 60) {\n              key = 'Peer.Status.justNow';\n            } else if((now - date) < 3600) {\n              key = 'Peer.Status.minAgo';\n              const c = (now - date) / 60 | 0;\n              args = [c];\n            } else if(now - date < 86400) {\n              key = 'LastSeen.HoursAgo';\n              const c = (now - date) / 3600 | 0;\n              args = [c];\n            } else {\n              key = 'Peer.Status.LastSeenAt';\n              const d = new Date(date * 1000);\n              args = [('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2), \n                ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2)];\n            }\n            \n            break;\n          }\n    \n          case 'userStatusOnline': {\n            key = 'Online';\n            break;\n          }\n    \n          default: {\n            key = 'ALongTimeAgo';\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n    \n    return i18n(key, args);\n  }\n\n  public isBot(id: number) {\n    return this.users[id] && this.users[id].pFlags.bot;\n  }\n\n  public isContact(id: number) {\n    return this.contactsList.has(id) || (this.users[id] && this.users[id].pFlags.contact);\n  }\n  \n  public isRegularUser(id: number) {\n    const user = this.users[id];\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\n  }\n\n  public isNonContactUser(id: number) {\n    return this.isRegularUser(id) && !this.isContact(id) && id !== rootScope.myId;\n  }\n\n  public hasUser(id: number, allowMin?: boolean) {\n    const user = this.users[id];\n    return isObject(user) && (allowMin || !user.pFlags.min);\n  }\n\n  public canSendToUser(id: number) {\n    const user = this.getUser(id);\n    return !user.pFlags.deleted && user.id !== REPLIES_PEER_ID;\n  }\n\n  public getUserPhoto(id: number) {\n    const user = this.getUser(id);\n\n    return user && user.photo || {\n      _: 'userProfilePhotoEmpty'\n    };\n  }\n\n  public getUserString(id: number) {\n    const user = this.getUser(id);\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\n  }\n\n  public getUserInput(id: number): InputUser {\n    const user = this.getUser(id);\n    if(user.pFlags && user.pFlags.self) {\n      return {_: 'inputUserSelf'};\n    }\n\n    return {\n      _: 'inputUser',\n      user_id: id,\n      access_hash: user.access_hash\n    };\n  }\n\n  public getContactMediaInput(id: number): InputMedia.inputMediaContact {\n    const user = this.getUser(id);\n\n    return {\n      _: 'inputMediaContact',\n      first_name: user.first_name,\n      last_name: user.last_name,\n      phone_number: user.phone,\n      vcard: '',\n      user_id: id\n    };\n  }\n\n  public updateUsersStatuses = () => {\n    const timestampNow = tsNow(true);\n    for(const i in this.users) {\n      const user = this.users[i];\n      this.updateUserStatus(user, timestampNow);\n    }\n  };\n\n  public updateUserStatus(user: MTUser.user, timestampNow = tsNow(true)) {\n    if(user.status &&\n      user.status._ === 'userStatusOnline' &&\n      user.status.expires < timestampNow) {\n\n      user.status = {_: 'userStatusOffline', was_online: user.status.expires};\n      rootScope.dispatchEvent('user_update', user.id);\n\n      this.setUserToStateIfNeeded(user);\n    }\n  }\n\n  public forceUserOnline(id: number, eventTimestamp?: number) {\n    if(this.isBot(id)) {\n      return;\n    }\n\n    const timestamp = tsNow(true);\n    const onlineTimeFor = 60;\n    if(eventTimestamp) {\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\n        return;\n      }\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\n      return;\n    }\n\n    const user = this.getUser(id);\n    if(user &&\n      user.status &&\n      user.status._ !== 'userStatusOnline' &&\n      user.status._ !== 'userStatusEmpty' &&\n      !user.pFlags.support &&\n      !user.pFlags.deleted) {\n\n      user.status = {\n        _: 'userStatusOnline',\n        expires: timestamp + onlineTimeFor\n      };\n      \n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', id);\n\n      this.setUserToStateIfNeeded(user);\n    }\n  }\n\n  public importContact(first_name: string, last_name: string, phone: string) {\n    return this.importContacts([{\n      first_name,\n      last_name,\n      phones: [phone]\n    }]).then(userIds => {\n      if(!userIds.length) {\n        const error = new Error();\n        (error as any).type = 'NO_USER';\n        throw error;\n      }\n\n      return userIds[0];\n    });\n  }\n\n  public importContacts(contacts: {phones: string[], first_name: string, last_name: string}[]) {\n    const inputContacts: InputContact[] = [];\n\n    for(let i = 0; i < contacts.length; ++i) {\n      for(let j = 0; j < contacts[i].phones.length; ++j) {\n        inputContacts.push({\n          _: 'inputPhoneContact',\n          client_id: (i << 16 | j).toString(10),\n          phone: contacts[i].phones[j],\n          first_name: contacts[i].first_name,\n          last_name: contacts[i].last_name\n        });\n      }\n    }\n\n    return apiManager.invokeApi('contacts.importContacts', {\n      contacts: inputContacts\n    }).then((importedContactsResult) => {\n      this.saveApiUsers(importedContactsResult.users);\n\n      const userIds = importedContactsResult.imported.map((importedContact) => {\n        this.onContactUpdated(importedContact.user_id, true);\n        return importedContact.user_id;\n      });\n\n      return userIds;\n    });\n  }\n\n  public getTopPeers(type: TopPeerType) {\n    if(this.getTopPeersPromises[type]) return this.getTopPeersPromises[type];\n\n    return this.getTopPeersPromises[type] = appStateManager.getState().then((state) => {\n      const cached = state.topPeersCache[type];\n      if(cached && (cached.cachedTime + 86400e3) > Date.now() && cached.peers) {\n        return cached.peers;\n      }\n\n      return apiManager.invokeApi('contacts.getTopPeers', {\n        [type]: true,\n        offset: 0,\n        limit: 15,\n        hash: 0\n      }).then((result) => {\n        let topPeers: MyTopPeer[] = [];\n        if(result._ === 'contacts.topPeers') {\n          //console.log(result);\n          this.saveApiUsers(result.users);\n          appChatsManager.saveApiChats(result.chats);\n\n          if(result.categories.length) {\n            topPeers = result.categories[0].peers.map((topPeer) => {\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\n              appStateManager.requestPeer(peerId, 'topPeer');\n              return {id: peerId, rating: topPeer.rating};\n            });\n          }\n        }\n  \n        state.topPeersCache[type] = {\n          peers: topPeers,\n          cachedTime: Date.now()\n        };\n        appStateManager.pushToState('topPeersCache', state.topPeersCache);\n  \n        return topPeers;\n      });\n    });\n  }\n\n  public getBlocked(offset = 0, limit = 0) {\n    return apiManager.invokeApiSingle('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\n      this.saveApiUsers(contactsBlocked.users);\n      appChatsManager.saveApiChats(contactsBlocked.chats);\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\n\n      const peerIds = contactsBlocked.users.map(u => u.id).concat(contactsBlocked.chats.map(c => -c.id));\n\n      return {count, peerIds};\n    });\n  }\n\n  /* public searchContacts(query: string, limit = 20) {\n    return Promise.all([\n      this.getContacts(query),\n      apiManager.invokeApi('contacts.search', {\n        q: query,\n        limit\n      })\n    ]).then(results => {\n      const [myContacts, peers] = results;\n\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      // * contacts.search returns duplicates in my_results\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\n\n      const out = {\n        my_results: [...myResults].slice(0, limit),\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\n      };\n\n      return out;\n    });\n  } */\n  public searchContacts(query: string, limit = 20) {\n    return apiManager.invokeApiCacheable('contacts.search', {\n      q: query,\n      limit\n    }, {cacheSeconds: 60}).then(peers => {\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      const out = {\n        my_results: filterUnique(peers.my_results.map(p => appPeersManager.getPeerId(p))), // ! contacts.search returns duplicates in my_results\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\n      };\n\n      return out;\n    });\n  }\n\n  private onContactUpdated(userId: number, isContact: boolean, curIsContact = this.isContact(userId)) {\n    if(isContact !== curIsContact) {\n      if(isContact) {\n        this.pushContact(userId);\n      } else {\n        this.contactsList.delete(userId);\n      }\n\n      this.onContactsModified();\n\n      rootScope.dispatchEvent('contacts_update', userId);\n    }\n  }\n\n  public updateUsername(username: string) {\n    return apiManager.invokeApi('account.updateUsername', {\n      username\n    }).then((user) => {\n      this.saveApiUser(user);\n    });\n  }\n\n  public setUserStatus(userId: number, offline: boolean) {\n    if(this.isBot(userId)) {\n      return;\n    }\n\n    const user = this.users[userId];\n    if(user) {\n      const status: any = offline ? {\n        _: 'userStatusOffline',\n        was_online: tsNow(true)\n      } : {\n        _: 'userStatusOnline',\n        expires: tsNow(true) + 500\n      };\n\n      user.status = status;\n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', userId);\n    }\n  }\n\n  public addContact(userId: number, first_name: string, last_name: string, phone: string, showPhone?: true) {\n    /* if(!userId) {\n      return this.importContacts([{\n        first_name,\n        last_name,\n        phones: [phone]\n      }]);\n    } */\n\n    return apiManager.invokeApi('contacts.addContact', {\n      id: this.getUserInput(userId),\n      first_name,\n      last_name,\n      phone,\n      add_phone_privacy_exception: showPhone\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      this.onContactUpdated(userId, true);\n    });\n  }\n\n  public deleteContacts(userIds: number[]) {\n    return apiManager.invokeApi('contacts.deleteContacts', {\n      id: userIds.map(userId => this.getUserInput(userId))\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      userIds.forEach(userId => {\n        this.onContactUpdated(userId, false);\n      });\n    });\n  }\n}\n\nconst appUsersManager = new AppUsersManager();\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\nexport default appUsersManager\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatPhoto, DialogPeer, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, UserProfilePhoto } from \"../../layer\";\r\nimport type { LangPackKey } from \"../langPack\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject } from \"../../helpers/object\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport I18n from '../langPack';\r\n\r\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\r\n/*\r\n  HTML-color  IRC-color  Description\r\n  #c03d33     4          red\r\n  #4fad2d     3          green\r\n  #d09306     7          yellow\r\n  #168acd     10         blue\r\n  #8544d6     6          purple\r\n  #cd4073     13         pink\r\n  #2996ad     11         sea\r\n  #ce671b     5          orange\r\n  */\r\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\r\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\r\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\r\n\r\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\r\nexport class AppPeersManager {\r\n  /* public savePeerInstance(peerId: number, instance: any) {\r\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\r\n    else appUsersManager.saveApiUser(instance);\r\n  } */\r\n\r\n  public canPinMessage(peerId: number) {\r\n    return peerId > 0 || appChatsManager.hasRights(-peerId, 'pin_messages');\r\n  }\r\n\r\n  public getPeerPhoto(peerId: number): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\r\n    const photo = peerId > 0\r\n      ? appUsersManager.getUserPhoto(peerId)\r\n      : appChatsManager.getChatPhoto(-peerId);\r\n\r\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : null;\r\n  }\r\n\r\n  public getPeerMigratedTo(peerId: number) {\r\n    if(peerId >= 0) {\r\n      return false;\r\n    }\r\n\r\n    let chat = appChatsManager.getChat(-peerId);\r\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n      return this.getPeerId(chat.migrated_to);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public getPeerTitle(peerId: number | any, plainText = false, onlyFirstName = false) {\r\n    if(!peerId) {\r\n      peerId = rootScope.myId;\r\n    }\r\n    \r\n    let peer: any = {}; \r\n    if(!isObject(peerId)) {\r\n      peer = this.getPeer(peerId);\r\n    } else peer = peerId;\r\n\r\n    let title = '';\r\n    if(peerId > 0) {\r\n      if(peer.first_name) title += peer.first_name;\r\n      if(peer.last_name && (!onlyFirstName || !title)) title += ' ' + peer.last_name;\r\n  \r\n      if(!title) title = peer.pFlags.deleted ? I18n.format('HiddenName', true) : peer.username;\r\n      else title = title.trim();\r\n    } else {\r\n      title = peer.title;\r\n\r\n      if(onlyFirstName) {\r\n        title = title.split(' ')[0];\r\n      }\r\n    }\r\n    \r\n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\r\n  }\r\n  \r\n  public getOutputPeer(peerId: number): Peer {\r\n    if(peerId > 0) {\r\n      return {_: 'peerUser', user_id: peerId};\r\n    }\r\n\r\n    let chatId = -peerId;\r\n    if(appChatsManager.isChannel(chatId)) {\r\n      return {_: 'peerChannel', channel_id: chatId};\r\n    }\r\n\r\n    return {_: 'peerChat', chat_id: chatId};\r\n  }\r\n\r\n  public getPeerString(peerId: number) {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUserString(peerId);\r\n    }\r\n    return appChatsManager.getChatString(-peerId);\r\n  }\r\n\r\n  public getPeerUsername(peerId: number): string {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUser(peerId).username || '';\r\n    }\r\n    return appChatsManager.getChat(-peerId).username || '';\r\n  }\r\n\r\n  public getPeer(peerId: number) {\r\n    return peerId > 0\r\n      ? appUsersManager.getUser(peerId)\r\n      : appChatsManager.getChat(-peerId)\r\n  }\r\n\r\n  public getPeerId(peerId: Peer | InputPeer | number | string): number {\r\n    if(typeof(peerId) === 'number') return peerId;\r\n    else if(isObject(peerId)) return (peerId as Peer.peerUser).user_id || -((peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id);\r\n    else if(!peerId) return 0;\r\n    \r\n    const isUser = (peerId as string).charAt(0) === 'u';\r\n    const peerParams = (peerId as string).substr(1).split('_');\r\n\r\n    return isUser ? +peerParams[0] : -peerParams[0] || 0;\r\n  }\r\n\r\n  public getDialogPeer(peerId: number): DialogPeer {\r\n    return {\r\n      _: 'dialogPeer',\r\n      peer: this.getOutputPeer(peerId)\r\n    };\r\n  }\r\n\r\n  public isChannel(peerId: number): boolean {\r\n    return (peerId < 0) && appChatsManager.isChannel(-peerId);\r\n  }\r\n\r\n  public isMegagroup(peerId: number) {\r\n    return (peerId < 0) && appChatsManager.isMegagroup(-peerId);\r\n  }\r\n\r\n  public isAnyGroup(peerId: number): boolean {\r\n    return (peerId < 0) && !appChatsManager.isBroadcast(-peerId);\r\n  }\r\n\r\n  public isBroadcast(peerId: number): boolean {\r\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\r\n  }\r\n\r\n  public isBot(peerId: number): boolean {\r\n    return (peerId > 0) && appUsersManager.isBot(peerId);\r\n  }\r\n\r\n  /* public getInputPeer(peerString: string): InputPeer {\r\n    var firstChar = peerString.charAt(0);\r\n    var peerParams = peerString.substr(1).split('_');\r\n    let id = +peerParams[0];\r\n\r\n    if(firstChar === 'u') {\r\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\r\n\r\n      return {\r\n        _: 'inputPeerUser',\r\n        user_id: id,\r\n        access_hash: peerParams[1]\r\n      };\r\n    } else if(firstChar === 'c' || firstChar === 's') {\r\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\r\n      if(firstChar === 's') {\r\n        appChatsManager.saveIsMegagroup(id);\r\n      }\r\n\r\n      return {\r\n        _: 'inputPeerChannel',\r\n        channel_id: id,\r\n        access_hash: peerParams[1] || '0'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputPeerChat',\r\n        chat_id: id\r\n      };\r\n    }\r\n  } */\r\n\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: boolean): InputNotifyPeer {\r\n    if(ignorePeerId) {\r\n      if(peerId > 0) {\r\n        return {_: 'inputNotifyUsers'};\r\n      } else {\r\n        if(appPeersManager.isBroadcast(peerId)) {\r\n          return {_: 'inputNotifyBroadcasts'};\r\n        } else {\r\n          return {_: 'inputNotifyChats'};\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        _: 'inputNotifyPeer', \r\n        peer: this.getInputPeerById(peerId)\r\n      };\r\n    }\r\n  }\r\n\r\n  public getInputPeerById(peerId: number): InputPeer {\r\n    if(!peerId) {\r\n      return {_: 'inputPeerEmpty'};\r\n    }\r\n\r\n    if(peerId < 0) {\r\n      const chatId = -peerId;\r\n      if(!appChatsManager.isChannel(chatId)) {\r\n        return appChatsManager.getChatInputPeer(chatId);\r\n      } else {\r\n        return appChatsManager.getChannelInputPeer(chatId);\r\n      }\r\n    }\r\n\r\n    return {\r\n      _: 'inputPeerUser',\r\n      user_id: peerId,\r\n      access_hash: appUsersManager.getUser(peerId).access_hash\r\n    };\r\n  }\r\n\r\n  public getInputDialogPeerById(peerId: number): InputDialogPeer {\r\n    return {\r\n      _: 'inputDialogPeer',\r\n      peer: this.getInputPeerById(peerId)\r\n    }\r\n  }\r\n\r\n  public getPeerColorById(peerId: number, pic = true) {\r\n    if(!peerId) return '';\r\n\r\n    const idx = DialogColorsMap[(peerId < 0 ? -peerId : peerId) % 7];\r\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\r\n    return color;\r\n  }\r\n\r\n  public getPeerSearchText(peerId: number) {\r\n    let text;\r\n    if(peerId > 0) {\r\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId);\r\n    } else if(peerId < 0) {\r\n      const chat = appChatsManager.getChat(-peerId);\r\n      text = '%pg ' + (chat.title || '');\r\n    }\r\n    return text;\r\n  }\r\n\r\n  public getDialogType(peerId: number): PeerType {\r\n    if(appPeersManager.isMegagroup(peerId)) {\r\n      return 'megagroup';\r\n    } else if(appPeersManager.isChannel(peerId)) {\r\n      return 'channel';\r\n    } else if(peerId < 0) {\r\n      return 'group';\r\n    } else {\r\n      return peerId === rootScope.myId ? 'saved' : 'chat';\r\n    }\r\n  }\r\n\r\n  public getDeleteButtonText(peerId: number): LangPackKey {\r\n    switch(this.getDialogType(peerId)) {\r\n      case 'channel':\r\n        return appChatsManager.hasRights(-peerId, 'delete_chat') ? 'ChannelDelete' : 'ChatList.Context.LeaveChannel';\r\n\r\n      case 'megagroup':\r\n      case 'group':\r\n        return appChatsManager.hasRights(-peerId, 'delete_chat') ? 'DeleteMega' : 'ChatList.Context.LeaveGroup';\r\n      \r\n      default:\r\n        return 'ChatList.Context.DeleteChat';\r\n    }\r\n  }\r\n}\r\n\r\nconst appPeersManager = new AppPeersManager();\r\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\r\nexport default appPeersManager;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatParticipant, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, Update, Updates } from \"../../layer\";\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\nimport apiManager from '../mtproto/mtprotoworker';\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\nimport appUsersManager from \"./appUsersManager\";\n\nexport type Channel = Chat.channel;\n\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\n\nexport class AppChatsManager {\n  private storage = appStateManager.storages.chats;\n  \n  private chats: {[id: number]: Chat.channel | Chat.chat | any};\n  //private usernames: any;\n  //private channelAccess: any;\n  //private megagroups: {[id: number]: true};\n\n  constructor() {\n    this.clear(true);\n\n    rootScope.addMultipleEventsListeners({\n      /* updateChannel: (update) => {\n        const channelId = update.channel_id;\n        //console.log('updateChannel:', update);\n        rootScope.broadcast('channel_settings', {channelId});\n      }, */\n\n      updateChannelParticipant: (update) => {\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\n        });\n      },\n\n      updateChatDefaultBannedRights: (update) => {\n        const chatId = -appPeersManager.getPeerId(update.peer);\n        const chat: Chat.chat = this.chats[chatId];\n        if(chat) {\n          chat.default_banned_rights = update.default_banned_rights;\n          rootScope.dispatchEvent('chat_update', chatId);\n        }\n      }\n    });\n\n    appStateManager.getState().then((state) => {\n      const chats = appStateManager.storagesResults.chats;\n      if(chats.length) {\n        for(let i = 0, length = chats.length; i < length; ++i) {\n          const chat = chats[i];\n          if(chat) {\n            this.chats[chat.id] = chat;\n          }\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\n        if(peerId > 0 || this.storage.getFromCache(-peerId)) {\n          return;\n        }\n\n        this.storage.set({\n          [-peerId]: this.getChat(-peerId)\n        });\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\n        if(peerId > 0 || !this.storage.getFromCache(-peerId)) {\n          return;\n        }\n\n        this.storage.delete(-peerId);\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const chats = appStateManager.storagesResults.chats;\n      for(const _chatId in this.chats) {\n        const chatId = +_chatId;\n        if(!chatId) continue;\n        if(!appStateManager.isPeerNeeded(-chatId)) {\n          /* const chat = this.chats[chatId];\n          if(chat.username) {\n            delete this.usernames[cleanUsername(chat.username)];\n          } */\n          \n          chats.findAndSplice((chat) => chat.id === chatId);\n          this.storage.delete(chatId);\n          delete this.chats[chatId];\n        }\n      }\n    } else {\n      this.chats = {};\n    }\n  }\n\n  public saveApiChats(apiChats: any[], override?: boolean) {\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\n  }\n\n  public saveApiChat(chat: Chat, override?: boolean) {\n    if(chat._ === 'chatEmpty') return;\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\n      return;\n    } */\n    \n    // * exclude from state\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\n\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\n\n    /* if(oldChat && !override) {\n      return;\n    } */\n\n    if((chat as Chat.chat).pFlags === undefined) {\n      (chat as Chat.chat).pFlags = {};\n    }\n\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\n      return;\n    }\n\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\n\n    if(chat._ === 'channel' &&\n        chat.participants_count === undefined &&\n        oldChat !== undefined &&\n        (oldChat as Chat.channel).participants_count) {\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\n    }\n\n    /* if(chat.username) {\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\n      this.usernames[searchUsername] = chat.id;\n    } */\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldChat === undefined) {\n      this.chats[chat.id] = chat;\n    } else {\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      if(oldChat.title !== chat.title) {\n        changedTitle = true;\n      }\n\n      safeReplaceObject(oldChat, chat);\n      rootScope.dispatchEvent('chat_update', chat.id);\n    }\n\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', -chat.id);\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', -chat.id);\n    }\n\n    if(appStateManager.isPeerNeeded(-chat.id)) {\n      this.storage.set({\n        [chat.id]: chat\n      });\n    }\n  }\n\n  public getChat(id: number) {\n    if(id < 0) id = -id;\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\n  }\n\n  public combineParticipantBannedRights(id: number, rights: ChatBannedRights) {\n    const chat: Chat.channel = this.getChat(id);\n\n    if(chat.default_banned_rights) {\n      rights = copy(rights);\n      const defaultRights = chat.default_banned_rights.pFlags;\n      for(let i in defaultRights) {\n        // @ts-ignore\n        rights.pFlags[i] = defaultRights[i];\n      }\n    }\n\n    return rights;\n  }\n\n  // * creator can still send messages to left channel. so this function shows server rights. see canSendToPeer for local rights in messages manager.\n  public hasRights(id: number, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty') return false;\n\n    if((chat as Chat.chat).pFlags.deactivated && action !== 'view_messages') {\n      return false;\n    }\n\n    if((chat as Chat.chat).pFlags.creator && rights === undefined) {\n      return true;\n    }\n\n    if(chat._ === 'chatForbidden' ||\n        chat._ === 'channelForbidden' ||\n        (chat as Chat.chat).pFlags.kicked ||\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\n      return false;\n    }\n\n    if(!rights) {\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\n\n      if(!rights) {\n        return false;\n      }\n    }\n\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\n    if(rights) {\n      myFlags = rights.pFlags as any;\n    }\n\n    switch(action) {\n      case 'embed_links':\n      case 'send_games':\n      case 'send_gifs':\n      case 'send_inline':\n      case 'send_media':\n      case 'send_messages':\n      case 'send_polls':\n      case 'send_stickers': {\n        if(!isThread && chat.pFlags.left) {\n          return false;\n        }\n\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\n          return false;\n        }\n\n        if(chat._ === 'channel') {\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\n            return false;\n          }\n        }\n\n        break;\n      }\n\n      // * revoke foreign messages\n      case 'delete_messages': {\n        return !!myFlags.delete_messages;\n      }\n\n      case 'pin_messages': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\n      }\n\n      case 'invite_users':\n      case 'change_info': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\n      }\n\n      // * only creator can do that\n      case 'change_type':\n      case 'delete_chat': {\n        return false;\n      }\n\n      case 'change_permissions': {\n        return rights._ === 'chatAdminRights' && myFlags['ban_users'];\n      }\n\n      case 'view_participants': {\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\n      }\n    }\n\n    return true;\n  }\n\n  public editChatDefaultBannedRights(id: number, banned_rights: ChatBannedRights) {\n    const chat: Chat.chat = this.getChat(id);\n    if(chat.default_banned_rights) {\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\n        return Promise.resolve();\n      }\n    }\n    \n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\n      peer: appPeersManager.getInputPeerById(-id),\n      banned_rights\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  /* public resolveUsername(username: string) {\n    return this.usernames[username] || 0;\n  } */\n\n  /* public saveChannelAccess(id: number, accessHash: string) {\n    this.channelAccess[id] = accessHash;\n  } */\n\n  /* public saveIsMegagroup(id: number) {\n    this.megagroups[id] = true;\n  } */\n\n  public isChannel(id: number) {\n    const chat = this.chats[id];\n    return chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */;\n  }\n\n  public isMegagroup(id: number) {\n    /* if(this.megagroups[id]) {\n      return true;\n    } */\n\n    const chat = this.chats[id];\n    return chat && chat._ === 'channel' && chat.pFlags.megagroup;\n  }\n\n  public isBroadcast(id: number) {\n    return this.isChannel(id) && !this.isMegagroup(id);\n  }\n\n  public isInChat(id: number) {\n    let good = true;\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channelForbidden' \n      || chat._ === 'chatForbidden' \n      || chat._ === 'chatEmpty' \n      || (chat as Chat.chat).pFlags.left \n      || (chat as Chat.chat).pFlags.kicked \n      || (chat as Chat.chat).pFlags.deactivated) {\n      good = false;\n    }\n\n    return good;\n  }\n\n  public getChannelInput(id: number): InputChannel {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\n      return {\n        _: 'inputChannelEmpty'\n      };\n    } else {\n      return {\n        _: 'inputChannel',\n        channel_id: id,\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\n      };\n    }\n  }\n\n  public getChatInputPeer(id: number): InputPeer.inputPeerChat {\n    return {\n      _: 'inputPeerChat',\n      chat_id: id\n    };\n  }\n\n  public getChannelInputPeer(id: number): InputPeer.inputPeerChannel {\n    return {\n      _: 'inputPeerChannel',\n      channel_id: id,\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\n    };\n  }\n\n  public hasChat(id: number, allowMin?: true) {\n    const chat = this.chats[id]\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\n  }\n\n  public getChatPhoto(id: number) {\n    const chat: Chat.chat = this.getChat(id);\n\n    return chat && chat.photo || {\n      _: 'chatPhotoEmpty'\n    };\n  }\n\n  public getChatString(id: number) {\n    const chat = this.getChat(id);\n    if(this.isChannel(id)) {\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\n    }\n    return 'g' + id;\n  }\n\n  /* public wrapForFull(id: number, fullChat: any) {\n    const chatFull = copy(fullChat);\n    const chat = this.getChat(id);\n\n    if(!chatFull.participants_count) {\n      chatFull.participants_count = chat.participants_count;\n    }\n\n    if(chatFull.participants &&\n        chatFull.participants._ === 'chatParticipants') {\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\n    }\n\n    if(chatFull.about) {\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\n    }\n\n    //chatFull.peerString = this.getChatString(id);\n    chatFull.chat = chat;\n\n    return chatFull;\n  }\n\n  public wrapParticipants(id: number, participants: any[]) {\n    const chat = this.getChat(id);\n    const myId = appUsersManager.getSelf().id;\n    if(this.isChannel(id)) {\n      const isAdmin = chat.pFlags.creator;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    } else {\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = !participant.canLeave && (\n          chat.pFlags.creator ||\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\n        );\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    }\n\n    return participants;\n  } */\n\n  public createChannel(title: string, about: string): Promise<number> {\n    return apiManager.invokeApi('channels.createChannel', {\n      broadcast: true,\n      title,\n      about\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const channelId = (updates as any).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: -channelId});\n\n      return channelId;\n    });\n  }\n\n  public inviteToChannel(id: number, userIds: number[]) {\n    const input = this.getChannelInput(id);\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\n\n    return apiManager.invokeApi('channels.inviteToChannel', {\n      channel: input,\n      users: usersInputs\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public createChat(title: string, userIds: number[]): Promise<number> {\n    return apiManager.invokeApi('messages.createChat', {\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\n      title\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const chatId = (updates as any as Updates.updates).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: -chatId});\n\n      return chatId;\n    });\n  }\n\n  private onChatUpdated = (chatId: number, updates?: any) => {\n    //console.log('onChatUpdated', chatId, updates);\n\n    apiUpdatesManager.processUpdateMessage(updates);\n    if(updates?.updates?.length && this.isChannel(chatId)) {\n      rootScope.dispatchEvent('invalidate_participants', chatId);\n    }\n  };\n\n  public leaveChannel(id: number) {\n    return apiManager.invokeApi('channels.leaveChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public joinChannel(id: number) {\n    return apiManager.invokeApi('channels.joinChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public addChatUser(id: number, userId: number, fwdLimit = 100) {\n    return apiManager.invokeApi('messages.addChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId),\n      fwd_limit: fwdLimit\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChatUser(id: number, userId: number) {\n    return apiManager.invokeApi('messages.deleteChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public leaveChat(id: number) {\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\n  }\n\n  public leave(id: number) {\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\n  }\n\n  public delete(id: number) {\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\n  }\n\n  public deleteChannel(id: number) {\n    return apiManager.invokeApi('channels.deleteChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChat(id: number) {\n    //return this.leaveChat(id).then(() => {\n      return apiManager.invokeApi('messages.deleteChat', {\n        chat_id: id\n      });\n    //});\n  }\n\n  public migrateChat(id: number): Promise<number> {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\n    return apiManager.invokeApi('messages.migrateChat', {\n      chat_id: id\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\n      return update.channel_id;\n    });\n  }\n\n  public updateUsername(id: number, username: string) {\n    return apiManager.invokeApi('channels.updateUsername', {\n      channel: this.getChannelInput(id),\n      username\n    }).then((bool) => {\n      if(bool) {\n        const chat: Chat.channel = this.getChat(id);\n        chat.username = username;\n      }\n\n      return bool;\n    });\n  }\n\n  public editPhoto(id: number, inputFile: InputFile) {\n    const inputChatPhoto: InputChatPhoto = {\n      _: 'inputChatUploadedPhoto',\n      file: inputFile\n    };\n\n    let promise: any;\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editPhoto', {\n        channel: this.getChannelInput(id),\n        photo: inputChatPhoto\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\n        chat_id: id,\n        photo: inputChatPhoto\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editTitle(id: number, title: string) {\n    let promise: any;\n\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editTitle', {\n        channel: this.getChannelInput(id),\n        title\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatTitle', {\n        chat_id: id,\n        title\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editAbout(id: number, about: string) {\n    return apiManager.invokeApi('messages.editChatAbout', {\n      peer: appPeersManager.getInputPeerById(-id),\n      about\n    }).then(bool => {\n      //apiUpdatesManager.processUpdateMessage(updates);\n      rootScope.dispatchEvent('peer_bio_edit', -id);\n    });\n  }\n\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant) {\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \n      (participant as ChatParticipant.chatParticipant).user_id;\n    return peerId;\n  }\n\n  public editBanned(id: number, participant: number | ChannelParticipant, banned_rights: ChatBannedRights) {\n    const peerId = typeof(participant) === 'number' ? participant : this.getParticipantPeerId(participant);\n    return apiManager.invokeApi('channels.editBanned', {\n      channel: this.getChannelInput(id),\n      participant: appPeersManager.getInputPeerById(peerId),\n      banned_rights\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n\n      if(typeof(participant) !== 'number') {\n        const timestamp = Date.now() / 1000 | 0;\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updateChannelParticipant',\n          channel_id: id,\n          date: timestamp,\n          actor_id: undefined,\n          qts: undefined,\n          user_id: peerId,\n          prev_participant: participant,\n          new_participant: Object.keys(banned_rights.pFlags).length ? {\n            _: 'channelParticipantBanned',\n            date: timestamp,\n            banned_rights,\n            kicked_by: appUsersManager.getSelf().id,\n            peer: appPeersManager.getOutputPeer(peerId),\n            pFlags: {}\n          } : undefined\n        });\n      }\n    });\n  }\n\n  public clearChannelParticipantBannedRights(id: number, participant: number | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {}\n    });\n  }\n  \n  public kickFromChannel(id: number, participant: number | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {\n        view_messages: true\n      }\n    });\n  }\n\n  public resolveChannel(id: number) {\n    return apiManager.invokeApiSingle('channels.getChannels', {\n      id: [{\n        _: 'inputChannel',\n        channel_id: id,\n        access_hash: '0'\n      }]\n    }).then(messagesChats => {\n      this.saveApiChats(messagesChats.chats);\n    });\n  }\n\n  public togglePreHistoryHidden(id: number, enabled: boolean) {\n    return this.migrateChat(id).then(channelId => {\n      return apiManager.invokeApi('channels.togglePreHistoryHidden', {\n        channel: this.getChannelInput(channelId),\n        enabled\n      });\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public toggleSignatures(id: number, enabled: boolean) {\n    return apiManager.invokeApi('channels.toggleSignatures', {\n      channel: this.getChannelInput(id),\n      enabled\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n}\n\nconst appChatsManager = new AppChatsManager();\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\nexport default appChatsManager;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/* import { copy } from \"./object\";\r\n\r\nexport function listMergeSorted(list1: any[] = [], list2: any[] = []) {\r\n  const result = copy(list1);\r\n\r\n  const minId = list1.length ? list1[list1.length - 1] : 0xFFFFFFFF;\r\n  for(let i = 0; i < list2.length; i++) {\r\n    if(list2[i] < minId) {\r\n      result.push(list2[i]);\r\n    }\r\n  }\r\n\r\n  return result;\r\n} */\r\n\r\nexport const accumulate = (arr: number[], initialValue: number) => arr.reduce((acc, value) => acc + value, initialValue);\r\n\r\nexport function findAndSpliceAll<T>(array: Array<T>, verify: (value: T, index: number, arr: typeof array) => boolean) {\r\n  const out: typeof array = [];\r\n  let idx = -1;\r\n  while((idx = array.findIndex(verify)) !== -1) {\r\n    out.push(array.splice(idx, 1)[0]);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function forEachReverse<T>(array: Array<T>, callback: (value: T, index?: number, array?: Array<T>) => void) {\r\n  for(let length = array.length, i = length - 1; i >= 0; --i) {\r\n    callback(array[i], i, array);\r\n  }\r\n};\r\n\r\nexport function insertInDescendSortedArray<T extends {[smth in K]?: number}, K extends keyof T>(array: Array<T>, element: T, property: K, pos?: number) {\r\n  const sortProperty: number = element[property];\r\n\r\n  if(pos === undefined) {\r\n    pos = array.indexOf(element);\r\n    if(pos !== -1) {\r\n      const prev = array[pos - 1];\r\n      const next = array[pos + 1];\r\n      if((!prev || prev[property] >= sortProperty) && (!next || next[property] <= sortProperty)) {\r\n        // console.warn('same pos', pos, sortProperty, prev, next);\r\n        return pos;\r\n      }\r\n      \r\n      array.splice(pos, 1);\r\n    }\r\n  }\r\n\r\n  const len = array.length;\r\n  if(!len || sortProperty <= array[len - 1][property]) {\r\n    return array.push(element) - 1;\r\n  } else if(sortProperty >= array[0][property]) {\r\n    array.unshift(element);\r\n    return 0;\r\n  } else {\r\n    for(let i = 0; i < len; i++) {\r\n      if(sortProperty > array[i][property]) {\r\n        array.splice(i, 0, element);\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n  console.error('wtf', array, element);\r\n  return array.indexOf(element);\r\n}\r\n\r\nexport function filterUnique<T extends Array<any>>(arr: T): T {\r\n  return [...new Set(arr)] as T;\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n//import apiManager from '../mtproto/apiManager';\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\nimport { Message, MessageFwdHeader, Peer, Update, Updates } from '../../layer';\nimport { logger, LogTypes } from '../logger';\nimport apiManager from '../mtproto/mtprotoworker';\nimport rootScope from '../rootScope';\n//import networkerFactory from '../mtproto/networkerFactory';\nimport appUsersManager from \"./appUsersManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from './appStateManager';\nimport serverTimeManager from '../mtproto/serverTimeManager';\nimport assumeType from '../../helpers/assumeType';\n\ntype UpdatesState = {\n  pendingPtsUpdates: (Update & {pts: number, pts_count: number})[],\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\n  syncPending: {\n    seqAwaiting?: number,\n    ptsAwaiting?: true,\n    timeout: number\n  },\n  syncLoading: Promise<void>,\n\n  seq?: number,\n  pts?: number,\n  date?: number,\n  lastPtsUpdateTime?: number\n};\n\nconst SYNC_DELAY = 6;\n\nexport class ApiUpdatesManager {\n  public updatesState: UpdatesState = {\n    pendingPtsUpdates: [],\n    pendingSeqUpdates: {},\n    syncPending: null,\n    syncLoading: null\n  };\n\n  private channelStates: {[channelId: number]: UpdatesState} = {};\n  private attached = false;\n\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\n  private debug = DEBUG;\n\n  private setProxy() {\n    const self = this;\n    this.updatesState = new Proxy(this.updatesState, {\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\n        // @ts-ignore\n        target[key] = value;\n        self.saveUpdatesState();\n        return true;\n      }\n    });\n  }\n\n  public saveUpdatesState() {\n    const us = this.updatesState;\n    appStateManager.pushToState('updates', {\n      seq: us.seq,\n      pts: us.pts,\n      date: us.date\n    });\n  }\n\n  private popPendingSeqUpdate() {\n    const state = this.updatesState;\n    const nextSeq = state.seq + 1;\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\n    if(!pendingUpdatesData) {\n      return false;\n    }\n\n    const updates = pendingUpdatesData.updates;\n    for(let i = 0, length = updates.length; i < length; ++i) {\n      this.saveUpdate(updates[i]);\n    }\n\n    state.seq = pendingUpdatesData.seq;\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\n      state.date = pendingUpdatesData.date;\n    }\n    delete state.pendingSeqUpdates[nextSeq];\n  \n    if(!this.popPendingSeqUpdate() &&\n      state.syncPending &&\n      state.syncPending.seqAwaiting &&\n      state.seq >= state.syncPending.seqAwaiting) {\n      if(!state.syncPending.ptsAwaiting) {\n        clearTimeout(state.syncPending.timeout);\n        state.syncPending = null;\n      } else {\n        delete state.syncPending.seqAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  private popPendingPtsUpdate(channelId: number) {\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\n    if(!curState.pendingPtsUpdates.length) {\n      return false;\n    }\n\n    curState.pendingPtsUpdates.sort((a, b) => {\n      return a.pts - b.pts;\n    });\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\n  \n    let curPts = curState.pts;\n    let goodPts = 0;\n    let goodIndex = 0;\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n      curPts += update.pts_count;\n      if(curPts >= update.pts) {\n        goodPts = update.pts;\n        goodIndex = i;\n      }\n    }\n  \n    if(!goodPts) {\n      return false;\n    }\n  \n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\n  \n    curState.pts = goodPts;\n    for(let i = 0; i <= goodIndex; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n\n      // @ts-ignore\n      this.saveUpdate(update);\n    }\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\n  \n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\n      if(!curState.syncPending.seqAwaiting) {\n        clearTimeout(curState.syncPending.timeout);\n        curState.syncPending = null;\n      } else {\n        delete curState.syncPending.ptsAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  public forceGetDifference() {\n    if(!this.updatesState.syncLoading) {\n      this.getDifference();\n    }\n  }\n\n  public processLocalUpdate(update: Update) {\n    this.processUpdateMessage({\n      _: 'updateShort',\n      update\n    } as Updates);\n  }\n\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\n    override: boolean\n  }> = {}) => {\n    // return forceGetDifference()\n    const processOpts = {\n      date: updateMessage.date,\n      seq: updateMessage.seq,\n      seqStart: updateMessage.seq_start,\n      //ignoreSyncLoading: options.ignoreSyncLoading\n    };\n\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\n  \n    switch(updateMessage._) {\n      case 'updatesTooLong':\n      case 'new_session_created':\n        this.forceGetDifference();\n        break;\n  \n      case 'updateShort':\n        this.processUpdate(updateMessage.update, processOpts);\n        break;\n  \n      case 'updateShortMessage':\n      case 'updateShortChatMessage': {\n        assumeType<Updates.updateShortChatMessage | Updates.updateShortMessage>(updateMessage);\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\n        const isOut = updateMessage.pFlags.out;\n        const fromId = (updateMessage as Updates.updateShortChatMessage).from_id || (isOut ? rootScope.myId : (updateMessage as Updates.updateShortMessage).user_id);\n        const toId = (updateMessage as Updates.updateShortChatMessage).chat_id\n          ? -(updateMessage as Updates.updateShortChatMessage).chat_id\n          : ((updateMessage as Updates.updateShortMessage).user_id || rootScope.myId);\n  \n        this.processUpdate({\n          _: 'updateNewMessage',\n          message: {\n            _: 'message',\n            pFlags: updateMessage.pFlags,\n            id: updateMessage.id,\n            from_id: appPeersManager.getOutputPeer(fromId),\n            peer_id: appPeersManager.getOutputPeer(toId),\n            date: updateMessage.date,\n            message: updateMessage.message,\n            fwd_from: updateMessage.fwd_from,\n            reply_to: updateMessage.reply_to,\n            entities: updateMessage.entities\n          },\n          pts: updateMessage.pts,\n          pts_count: updateMessage.pts_count\n        }, processOpts);\n        break;\n      }\n  \n      case 'updatesCombined':\n      case 'updates':\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\n  \n        updateMessage.updates.forEach((update: Update) => {\n          this.processUpdate(update, processOpts);\n        });\n        break;\n  \n      default:\n        this.log.warn('Unknown update message', updateMessage);\n    }\n  };\n  \n  private getDifference(first = false): Promise<void> {\n    // this.trace('Get full diff')\n    const updatesState = this.updatesState;\n    let wasSyncing = updatesState.syncLoading;\n    if(!wasSyncing) {\n      updatesState.pendingSeqUpdates = {};\n      updatesState.pendingPtsUpdates = [];\n    }\n  \n    if(updatesState.syncPending) {\n      clearTimeout(updatesState.syncPending.timeout);\n      updatesState.syncPending = null;\n    }\n\n    const promise = apiManager.invokeApi('updates.getDifference', {\n      pts: updatesState.pts, \n      pts_total_limit: first /* && false  */? /* 50 */1200 : undefined,\n      date: updatesState.date, \n      qts: -1\n    }, {\n      timeout: 0x7fffffff\n    }).then((differenceResult) => {\n      this.debug && this.log.debug('Get diff result', differenceResult);\n\n      if(differenceResult._ === 'updates.differenceEmpty') {\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\n        updatesState.date = differenceResult.date;\n        updatesState.seq = differenceResult.seq;\n        return;\n      }\n\n      // ! SORRY I'M SORRY I'M SORRY\n      if(first) {\n        rootScope.dispatchEvent('state_synchronizing');\n      }\n\n      if(differenceResult._ !== 'updates.differenceTooLong') {\n        appUsersManager.saveApiUsers(differenceResult.users);\n        appChatsManager.saveApiChats(differenceResult.chats);\n\n        // Should be first because of updateMessageID\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\n    \n        differenceResult.other_updates.forEach((update) => {\n          switch(update._) {\n            case 'updateChannelTooLong':\n            case 'updateNewChannelMessage':\n            case 'updateEditChannelMessage':\n              this.processUpdate(update);\n              return;\n          }\n          \n          this.saveUpdate(update);\n        });\n\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\n        differenceResult.new_messages.forEach((apiMessage) => {\n          this.saveUpdate({\n            _: 'updateNewMessage',\n            message: apiMessage,\n            pts: updatesState.pts,\n            pts_count: 0\n          });\n        });\n\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\n        updatesState.seq = nextState.seq;\n        updatesState.pts = nextState.pts;\n        updatesState.date = nextState.date;\n      } else {\n        updatesState.pts = differenceResult.pts;\n        updatesState.date = (Date.now() / 1000 | 0) + serverTimeManager.serverTimeOffset;\n        delete updatesState.seq;\n        \n        this.channelStates = {};\n        \n        this.log.warn('getDifference:', differenceResult._);\n        rootScope.dispatchEvent('state_cleared');\n      }\n  \n      // this.log('apply diff', updatesState.seq, updatesState.pts)\n  \n      if(differenceResult._ === 'updates.differenceSlice') {\n        return this.getDifference();\n      } else {\n        this.debug && this.log.debug('finished get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(updatesState, promise);\n    }\n  \n    return promise;\n  }\n\n  private getChannelDifference(channelId: number): Promise<void> {\n    const channelState = this.getChannelState(channelId);\n    const wasSyncing = channelState.syncLoading;\n    if(!wasSyncing) {\n      channelState.pendingPtsUpdates = [];\n    }\n\n    if(channelState.syncPending) {\n      clearTimeout(channelState.syncPending.timeout);\n      channelState.syncPending = null;\n    }\n\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\n      channel: appChatsManager.getChannelInput(channelId),\n      filter: {_: 'channelMessagesFilterEmpty'},\n      pts: channelState.pts,\n      limit: 30\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\n  \n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\n        return;\n      }\n  \n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\n        this.debug && this.log.debug('channel diff too long', differenceResult);\n        delete this.channelStates[channelId];\n\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\n        return;\n      }\n  \n      appUsersManager.saveApiUsers(differenceResult.users);\n      appChatsManager.saveApiChats(differenceResult.chats);\n  \n      // Should be first because of updateMessageID\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\n      differenceResult.other_updates.forEach((update) => {\n        this.saveUpdate(update);\n      });\n  \n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\n      differenceResult.new_messages.forEach((apiMessage) => {\n        this.saveUpdate({\n          _: 'updateNewChannelMessage',\n          message: apiMessage,\n          pts: channelState.pts,\n          pts_count: 0\n        });\n      });\n  \n      this.debug && this.log.debug('apply channel diff', channelState.pts);\n  \n      if(differenceResult._ === 'updates.channelDifference' &&\n        !differenceResult.pFlags['final']) {\n        return this.getChannelDifference(channelId);\n      } else {\n        this.debug && this.log.debug('finished channel get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(channelState, promise, channelId);\n    }\n\n    return promise;\n  }\n\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: number) {\n    state.syncLoading = promise;\n    rootScope.dispatchEvent('state_synchronizing', channelId);\n\n    promise.then(() => {\n      state.syncLoading = null;\n      rootScope.dispatchEvent('state_synchronized', channelId);\n    }, () => {\n      state.syncLoading = null;\n    });\n  }\n  \n  public addChannelState(channelId: number, pts: number) {\n    if(!pts) {\n      throw new Error('Add channel state without pts ' + channelId);\n    }\n\n    if(!(channelId in this.channelStates)) {\n      this.channelStates[channelId] = {\n        pts,\n        pendingPtsUpdates: [],\n        syncPending: null,\n        syncLoading: null\n      };\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public getChannelState(channelId: number, pts?: number) {\n    if(this.channelStates[channelId] === undefined) {\n      this.addChannelState(channelId, pts);\n    }\n\n    return this.channelStates[channelId];\n  }\n\n  private processUpdate(update: Update, options: Partial<{\n    date: number,\n    seq: number,\n    seqStart: number/* ,\n    ignoreSyncLoading: boolean */\n  }> = {}) {\n    let channelId = 0;\n    switch(update._) {\n      case 'updateNewChannelMessage':\n      case 'updateEditChannelMessage':\n        channelId = -appPeersManager.getPeerId(update.message.peer_id);\n        break;\n      /* case 'updateDeleteChannelMessages':\n        channelId = update.channel_id;\n        break; */\n      case 'updateChannelTooLong':\n        channelId = update.channel_id;\n        if(!(channelId in this.channelStates)) {\n          return false;\n        }\n        break;\n      default:\n        if('channel_id' in update && 'pts' in update) {\n          channelId = update.channel_id;\n        }\n        break;\n    }\n  \n    const {pts, pts_count} = update as Update.updateNewMessage;\n    const curState = channelId ? this.getChannelState(channelId, pts) : this.updatesState;\n  \n    // this.log.log('process', channelId, curState.pts, update)\n  \n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\n      return false;\n    }\n  \n    if(update._ === 'updateChannelTooLong') {\n      if(!curState.lastPtsUpdateTime ||\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\n        // this.log.trace('channel too long, get diff', channelId, update)\n        this.getChannelDifference(channelId);\n      }\n      return false;\n    }\n  \n    if(update._ === 'updateNewMessage' ||\n        update._ === 'updateEditMessage' ||\n        update._ === 'updateNewChannelMessage' ||\n        update._ === 'updateEditChannelMessage') {\n      const message = update.message as Message.message;\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\n      const fwdHeader: MessageFwdHeader.messageFwdHeader = message.fwd_from || {} as any;\n      let reason: string;\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!(fwdHeader.from_id as Peer.peerChannel).channel_id) && (reason = 'fwdAuthor') ||\n          (fwdHeader.from_id as Peer.peerChannel)?.channel_id && !appChatsManager.hasChat((fwdHeader.from_id as Peer.peerChannel).channel_id, true) && (reason = 'fwdChannel') ||\n          toPeerId > 0 && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\n          toPeerId < 0 && !appChatsManager.hasChat(-toPeerId) && (reason = 'toPeer Chat')) {\n        this.log.warn('Not enough data for message update', toPeerId, reason, message);\n        if(channelId && appChatsManager.hasChat(channelId)) {\n          this.getChannelDifference(channelId);\n        } else {\n          this.forceGetDifference();\n        }\n        return false;\n      }\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\n      // this.log.log('skip update, missing channel', channelId, update)\n      return false;\n    }\n  \n    let popPts: boolean;\n    let popSeq: boolean;\n  \n    if(pts) {\n      const newPts = curState.pts + (pts_count || 0);\n      if(newPts < pts) {\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\n        curState.pendingPtsUpdates.push(update as Update.updateNewMessage);\n        if(!curState.syncPending && !curState.syncLoading) {\n          curState.syncPending = {\n            timeout: window.setTimeout(() => {\n              curState.syncPending = null;\n\n              if(curState.syncLoading) {\n                return;\n              }\n\n              if(channelId) {\n                this.getChannelDifference(channelId);\n              } else {\n                this.getDifference();\n              }\n            }, SYNC_DELAY)\n          };\n        }\n\n        curState.syncPending.ptsAwaiting = true;\n        return false;\n      }\n\n      if(pts > curState.pts) {\n        curState.pts = pts;\n        popPts = true;\n  \n        curState.lastPtsUpdateTime = Date.now();\n      } else if(pts_count) {\n        // this.log.warn('Duplicate update', update)\n        return false;\n      }\n\n      if(channelId && options.date && this.updatesState.date < options.date) {\n        this.updatesState.date = options.date;\n      }\n    } else if(!channelId && options.seq > 0) {\n      const seq = options.seq;\n      const seqStart = options.seqStart || seq;\n  \n      if(seqStart !== curState.seq + 1) {\n        if(seqStart > curState.seq) {\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\n  \n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\n          }\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\n  \n          if(!curState.syncPending) {\n            curState.syncPending = {\n              timeout: window.setTimeout(() => {\n                curState.syncPending = null;\n\n                if(curState.syncLoading) {\n                  return;\n                }\n\n                this.getDifference();\n              }, SYNC_DELAY)\n            };\n          }\n\n          if(!curState.syncPending.seqAwaiting ||\n            curState.syncPending.seqAwaiting < seqStart) {\n            curState.syncPending.seqAwaiting = seqStart;\n          }\n          return false;\n        }\n      }\n  \n      if(curState.seq !== seq) {\n        curState.seq = seq;\n        if(options.date && curState.date < options.date) {\n          curState.date = options.date;\n        }\n\n        popSeq = true;\n      }\n    }\n  \n    this.saveUpdate(update);\n  \n    if(popPts) {\n      this.popPendingPtsUpdate(channelId);\n    } else if(popSeq) {\n      this.popPendingSeqUpdate();\n    }\n  }\n\n  public saveUpdate(update: Update) {\n    //this.debug && this.log('saveUpdate', update);\n    rootScope.dispatchEvent(update._, update as any);\n  }\n  \n  public attach() {\n    if(this.attached) return;\n\n    //return;\n\n    this.log('attach');\n    \n    this.attached = true;\n\n    appStateManager.getState().then(_state => {\n      const state = _state.updates;\n\n      //rootScope.broadcast('state_synchronizing');\n      if(!state || !state.pts || !state.date || !state.seq) {\n        this.log('will get new state');\n\n        this.updatesState.syncLoading = new Promise((resolve) => {\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\n            this.updatesState.seq = stateResult.seq;\n            this.updatesState.pts = stateResult.pts;\n            this.updatesState.date = stateResult.date;\n            this.saveUpdatesState();\n            //setTimeout(() => {\n              this.updatesState.syncLoading = null;\n              resolve();\n              //rootScope.broadcast('state_synchronized');\n            //}, 1000);\n        \n          // ! for testing\n          // updatesState.seq = 1\n          // updatesState.pts = stateResult.pts - 5000\n          // updatesState.date = 1\n          // getDifference()\n          });\n        });\n      } else {\n        // ! for testing\n        /* state.seq = 1;\n        state.pts = state.pts - 15;\n        state.date = 1; */\n        // state.pts -= 100;\n\n        Object.assign(this.updatesState, state);\n        \n        this.log('will get difference', Object.assign({}, state));\n        \n        this.getDifference(true)/* .finally(() => {\n          if(this.updatesState.syncLoading) {\n            rootScope.broadcast('state_synchronizing');\n          }\n        }) */;\n      }\n\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\n\n      // this.updatesState.syncLoading.then(() => {\n        this.setProxy();\n      // });\n    });\n  }\n}\n\nconst apiUpdatesManager = new ApiUpdatesManager();\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\nexport default apiUpdatesManager\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { processSearchText, ProcessSearchTextOptions } from '../helpers/cleanSearchText';\n\nexport default class SearchIndex<SearchWhat> {\n  private fullTexts: Map<SearchWhat, string> = new Map();\n\n  // minChars can be 0 because it requires at least one word (one symbol) to be found\n  constructor(private options?: ProcessSearchTextOptions, private minChars = 0) {\n  }\n\n  public indexObject(id: SearchWhat, searchText: string) {\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\n      return false;\n    } */\n\n    if(this.options && searchText.trim()) {\n      searchText = processSearchText(searchText, this.options);\n    }\n\n    if(!searchText) {\n      this.fullTexts.delete(id);\n      return false;\n    }\n\n    this.fullTexts.set(id, searchText);\n    \n    /* const shortIndexes = searchIndex.shortIndexes;\n    searchText.split(' ').forEach((searchWord) => {\n      let len = Math.min(searchWord.length, 3),\n        wordPart, i;\n      for(i = 1; i <= len; i++) {\n        wordPart = searchWord.substr(0, i);\n        if(shortIndexes[wordPart] === undefined) {\n          shortIndexes[wordPart] = [id];\n        } else {\n          shortIndexes[wordPart].push(id);\n        }\n      }\n    }); */\n  }\n\n  public search(query: string) {\n    const fullTexts = this.fullTexts;\n    //const shortIndexes = searchIndex.shortIndexes;\n\n    if(this.options) {\n      query = processSearchText(query, this.options);\n    }\n\n    const newFoundObjs: Array<{fullText: string, fullTextLength: number, what: SearchWhat, foundChars: number}> = [];\n    const queryWords = query.split(' ');\n    const queryWordsLength = queryWords.length;\n    fullTexts.forEach((fullText, what) => {\n      let found = true;\n      let foundChars = 0;\n      for(let i = 0; i < queryWordsLength; ++i) { // * verify that all words are found\n        const word = queryWords[i];\n        const idx = fullText.indexOf(word);\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\n          found = false;\n          break;\n        }\n\n        foundChars += word.length;\n      }\n\n      if(found) {\n        foundChars += queryWordsLength - 1;\n        const fullTextLength = fullText.length;\n        if(this.minChars <= foundChars || fullTextLength <= foundChars) {\n          newFoundObjs.push({fullText, fullTextLength, what, foundChars});\n        }\n      }\n    });\n\n    newFoundObjs.sort((a, b) => a.fullTextLength - b.fullTextLength || b.foundChars - a.foundChars);\n\n    //newFoundObjs.sort((a, b) => a.fullText.localeCompare(b.fullText));\n    const newFoundObjs2: Set<SearchWhat> = new Set(newFoundObjs.map(o => o.what));\n\n    /* const queryWords = query.split(' ');\n    let foundArr: number[];\n    for(let i = 0; i < queryWords.length; i++) {\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\n      if(!newFound) {\n        foundArr = [];\n        break;\n      }\n      \n      if(foundArr === undefined || foundArr.length > newFound.length) {\n        foundArr = newFound;\n      }\n    }\n\n    for(let j = 0; j < foundArr.length; j++) {\n      let found = true;\n      let searchText = fullTexts[foundArr[j]];\n      for(let i = 0; i < queryWords.length; i++) {\n        if(searchText.indexOf(queryWords[i]) === -1) {\n          found = false;\n          break;\n        }\n      }\n\n      if(found) {\n        newFoundObjs[foundArr[j]] = true;\n      }\n    } */\n\n    return newFoundObjs2;\n  }\n}\n","export default function assumeType<T>(x: unknown): asserts x is T {\r\n  return; // ¯\\_(ツ)_/¯\r\n}\r\n"],"sourceRoot":""}