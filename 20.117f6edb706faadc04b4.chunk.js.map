{"version":3,"sources":["webpack:///./src/lib/rootScope.ts","webpack:///./src/config/debug.ts","webpack:///./src/helpers/eventListenerBase.ts","webpack:///./src/config/modes.ts"],"names":["RootScope","super","overlaysActive","myId","idle","isIDLE","deactivated","focusPromise","Promise","resolve","focusResolve","connectionStatus","peerId","filterId","config","forwarded_count_max","edit_time_limit","pinned_dialogs_count_max","pinned_infolder_count_max","message_length_max","caption_length_max","this","addEventListener","e","id","status","name","darkModeMediaQuery","window","matchMedia","checkDarkMode","systemTheme","matches","dispatchEvent","setTheme","addListener","err","isNight","getTheme","colorScheme","document","head","querySelector","setAttribute","documentElement","classList","toggle","value","isOverlayActive","settings","theme","themes","find","t","rootScope","DEBUG","debug","MOUNT_CLASS_TO","self","EventListenerBase","reuseResults","_constructor","listeners","listenerResults","callback","options","push","hasOwnProperty","once","pop","obj","i","findAndSplice","l","args","arr","slice","forEach","listener","findIndex","removeEventListener","Modes","test","location","search","indexOf","http","ssl","multipleConnections","asServiceWorker"],"mappings":"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","file":"20.117f6edb706faadc04b4.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { Message, StickerSet, Update, NotifyPeer, PeerNotifySettings, ConstructorDeclMap, Config } from \"../layer\";\nimport type { MyDocument } from \"./appManagers/appDocsManager\";\nimport type { AppMessagesManager, Dialog, MessagesStorage } from \"./appManagers/appMessagesManager\";\nimport type { Poll, PollResults } from \"./appManagers/appPollsManager\";\nimport type { MyDialogFilter } from \"./storages/filters\";\nimport type { UserTyping } from \"./appManagers/appProfileManager\";\nimport type Chat from \"../components/chat/chat\";\nimport type { UserAuth } from \"./mtproto/mtproto_config\";\nimport type { State, Theme } from \"./appManagers/appStateManager\";\nimport type { MyDraftMessage } from \"./appManagers/appDraftsManager\";\nimport type { PushSubscriptionNotify } from \"./mtproto/webPushApiManager\";\nimport type { PushNotificationObject } from \"./serviceWorker/push\";\nimport type { ConnectionStatusChange } from \"./mtproto/connectionStatus\";\nimport EventListenerBase from \"../helpers/eventListenerBase\";\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\n\nexport type BroadcastEvents = {\n  'user_update': number,\n  'user_auth': UserAuth,\n  'peer_changed': number,\n  'peer_changing': Chat,\n  'peer_pinned_messages': {peerId: number, mids?: number[], pinned?: boolean, unpinAll?: true},\n  'peer_pinned_hidden': {peerId: number, maxId: number},\n  'peer_typings': {peerId: number, typings: UserTyping[]},\n  'peer_block': {peerId: number, blocked: boolean},\n  'peer_title_edit': number,\n  'peer_bio_edit': number,\n\n  'filter_delete': MyDialogFilter,\n  'filter_update': MyDialogFilter,\n  'filter_order': number[],\n  \n  'dialog_draft': {peerId: number, dialog: Dialog, drop: boolean, draft: MyDraftMessage | undefined, index: number},\n  'dialog_unread': {peerId: number},\n  'dialog_flush': {peerId: number},\n  'dialog_drop': {peerId: number, dialog?: Dialog},\n  'dialog_migrate': {migrateFrom: number, migrateTo: number},\n  //'dialog_top': Dialog,\n  'dialog_notify_settings': Dialog,\n  // 'dialog_order': {dialog: Dialog, pos: number},\n  'dialogs_multiupdate': {[peerId: string]: Dialog},\n  'dialogs_archived_unread': {count: number},\n  \n  'history_append': {storage: MessagesStorage, peerId: number, mid: number},\n  'history_update': {storage: MessagesStorage, peerId: number, mid: number},\n  'history_reply_markup': {peerId: number},\n  'history_multiappend': AppMessagesManager['newMessagesToHandle'],\n  'history_delete': {peerId: number, msgs: Set<number>},\n  'history_forbidden': number,\n  'history_reload': number,\n  'history_focus': {peerId: number, threadId?: number, mid?: number},\n  //'history_request': void,\n  \n  'message_edit': {storage: MessagesStorage, peerId: number, mid: number},\n  'message_views': {peerId: number, mid: number, views: number},\n  'message_sent': {storage: MessagesStorage, tempId: number, tempMessage: any, mid: number},\n  'messages_pending': void,\n  'messages_read': void,\n  'messages_downloaded': {peerId: number, mids: number[]},\n  'messages_media_read': {peerId: number, mids: number[]},\n\n  'replies_updated': Message.message,\n\n  'scheduled_new': {peerId: number, mid: number},\n  'scheduled_delete': {peerId: number, mids: number[]},\n\n  'album_edit': {peerId: number, groupId: string, deletedMids: number[]},\n\n  'stickers_installed': StickerSet.stickerSet,\n  'stickers_deleted': StickerSet.stickerSet,\n\n  'audio_play': {doc: MyDocument, mid: number, peerId: number},\n  'audio_pause': void,\n  \n  'state_cleared': void,\n  'state_synchronized': number | void,\n  'state_synchronizing': number | void,\n  \n  'contacts_update': number,\n  'avatar_update': number,\n  'chat_full_update': number,\n  'poll_update': {poll: Poll, results: PollResults},\n  'chat_update': number,\n  'invalidate_participants': number,\n  //'channel_settings': {channelId: number},\n  'webpage_updated': {id: string, msgs: {peerId: number, mid: number, isScheduled: boolean}[]},\n\n  'connection_status_change': ConnectionStatusChange,\n  'settings_updated': {key: string, value: any},\n  'draft_updated': {peerId: number, threadId: number, draft: MyDraftMessage | undefined, force?: boolean},\n  \n  'event-heavy-animation-start': void,\n  'event-heavy-animation-end': void,\n  \n  'im_mount': void,\n  'im_tab_change': number,\n  \n  'idle': boolean,\n  \n  'overlay_toggle': boolean,\n  \n  'background_change': void,\n  \n  'privacy_update': Update.updatePrivacy,\n  \n  'notify_settings': Update.updateNotifySettings,\n  'notify_peer_type_settings': {key: Exclude<NotifyPeer['_'], 'notifyPeer'>, settings: PeerNotifySettings},\n  \n  'language_change': string,\n  \n  'theme_change': void,\n  \n  'instance_activated': void,\n  'instance_deactivated': void,\n  \n  'push_notification_click': PushNotificationObject,\n  'push_init': PushSubscriptionNotify,\n  'push_subscribe': PushSubscriptionNotify,\n  'push_unsubscribe': PushSubscriptionNotify,\n  \n  'emoji_recent': string,\n  \n  'download_start': string,\n  'download_progress': any,\n  'document_downloaded': MyDocument,\n\n  'context_menu_toggle': boolean\n};\n\nexport class RootScope extends EventListenerBase<{\n  [name in Update['_']]: (update: ConstructorDeclMap[name]) => void\n} & {\n  [name in keyof BroadcastEvents]: (e: BroadcastEvents[name]) => void\n}> {\n  public overlaysActive = 0;\n  public myId = 0;\n  public idle = {\n    isIDLE: true,\n    deactivated: false,\n    focusPromise: Promise.resolve(),\n    focusResolve: () => {}\n  };\n  public connectionStatus: {[name: string]: ConnectionStatusChange} = {};\n  public settings: State['settings'];\n  public peerId = 0;\n  public filterId = 0;\n  public systemTheme: Theme['name'];\n  public config: Partial<Config.config> = {\n    forwarded_count_max: 100,\n    edit_time_limit: 86400 * 2,\n    pinned_dialogs_count_max: 5,\n    pinned_infolder_count_max: 100,\n    message_length_max: 4096,\n    caption_length_max: 1024,\n  };\n\n  constructor() {\n    super();\n\n    this.addEventListener('peer_changed', (peerId) => {\n      this.peerId = peerId;\n    });\n\n    this.addEventListener('user_auth', (e) => {\n      this.myId = e.id;\n    });\n\n    this.addEventListener('connection_status_change', (e) => {\n      const status = e;\n      this.connectionStatus[e.name] = status;\n    });\n\n    this.addEventListener('idle', (isIDLE) => {\n      if(isIDLE) {\n        this.idle.focusPromise = new Promise((resolve) => {\n          this.idle.focusResolve = resolve;\n        });\n      } else {\n        this.idle.focusResolve();\n      }\n    });\n  }\n\n  public setThemeListener() {\n    try {\n      const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const checkDarkMode = () => {\n        //const theme = this.getTheme();\n        this.systemTheme = darkModeMediaQuery.matches ? 'night' : 'day';\n        //const newTheme = this.getTheme();\n\n        if(this.myId) {\n          this.dispatchEvent('theme_change');\n        } else {\n          this.setTheme();\n        }\n      };\n\n      if('addEventListener' in darkModeMediaQuery) {\n        darkModeMediaQuery.addEventListener('change', checkDarkMode);\n      } else if('addListener' in darkModeMediaQuery) {\n        (darkModeMediaQuery as any).addListener(checkDarkMode);\n      }\n\n      checkDarkMode();\n    } catch(err) {\n\n    }\n  }\n\n  public setTheme() {\n    const isNight = this.getTheme().name === 'night';\n    const colorScheme = document.head.querySelector('[name=\"color-scheme\"]');\n    if(colorScheme) {\n      colorScheme.setAttribute('content', isNight ? 'dark' : 'light');\n    }\n\n    document.documentElement.classList.toggle('night', isNight);\n  }\n\n  get isOverlayActive() {\n    return this.overlaysActive > 0;\n  }\n\n  set isOverlayActive(value: boolean) {\n    this.overlaysActive += value ? 1 : -1;\n    this.dispatchEvent('overlay_toggle', this.isOverlayActive);\n  }\n\n  public getTheme(name: Theme['name'] = this.settings.theme === 'system' ? this.systemTheme : this.settings.theme) {\n    return this.settings.themes.find(t => t.name === name);\n  }\n}\n\nconst rootScope = new RootScope();\nMOUNT_CLASS_TO.rootScope = rootScope;\nexport default rootScope;\n\n/* rootScope.addEventListener('album_edit', (e) => {\n  \n});\n\nrootScope.addEventListener<'album_edit'>('album_edit', (e) => {\n  \n}); */\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from \"./modes\";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\r\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\r\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\r\nexport default DEBUG;\r\n\r\n//let m = DEBUG;\r\n/* if(!DEBUG) {\r\n  ctx.sandpitTurtle = () => {\r\n    //if(!m) {\r\n      for(let i in MOUNT_CLASS_TO) {\r\n        ctx[i] = MOUNT_CLASS_TO[i];\r\n      }\r\n      //m = true;\r\n    //}\r\n  \r\n    //DEBUG = !DEBUG;\r\n  };\r\n} */\r\n\r\n/* export const superDebug = (object: any, key: string) => {\r\n  var d = object[key];\r\n  var beforeStr = '', afterStr = '';\r\n  for(var r of d) {\r\n    beforeStr += r.before.hex + '\\n';\r\n    afterStr += r.after.hex + '\\n';\r\n  }\r\n\r\n  beforeStr = beforeStr.trim();\r\n  afterStr = afterStr.trim();\r\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\r\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\r\n\r\n  var dada = (name: string, str: string) => {\r\n    var a = document.createElement('a');\r\n    a.target = '_blank';\r\n    a.download = name + '.txt';\r\n    a.href = URL.createObjectURL(new Blob([str], {\r\n      type: 'text/plain'\r\n    }));\r\n    document.body.append(a);\r\n    a.click();\r\n  };\r\n\r\n  dada(key + '_' + 'before', beforeStr);\r\n  dada(key + '_' + 'after', afterStr);\r\n}\r\n\r\nMOUNT_CLASS_TO.superDebug = superDebug; */\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n//import { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport type { ArgumentTypes, SuperReturnType } from \"../types\";\r\n\r\n// class EventSystem {\r\n//   wm: WeakMap<any, Record<any, Set<any>>> = new WeakMap();\r\n\r\n//   add(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (listeners === undefined) {\r\n//         listeners = {};\r\n//     }\r\n//     let listenersForEvent = listeners[event];\r\n//     if (listenersForEvent === undefined) {\r\n//         listenersForEvent = new Set();\r\n//     }\r\n//     listenersForEvent.add(listener);\r\n//     listeners[event] = listenersForEvent;\r\n//     //target.addEventListener(event, listener);\r\n//     this.wm.set(target, listeners);\r\n//   };\r\n\r\n//   remove(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (!listeners) return;\r\n//     let listenersForEvent = listeners[event];\r\n//     if (!listenersForEvent) return;\r\n//     listenersForEvent.delete(listener);\r\n//   };\r\n  \r\n//   /* fire(target, event) {\r\n//      let listeners = this.wm.get(target);\r\n//      if (!listeners) return;\r\n//      let listenersForEvent = listeners[event];\r\n//      if (!listenersForEvent) return;\r\n//      for (let handler of handlers) {\r\n//          setTimeout(handler, 0, event, target); // we use a setTimeout here because we want event triggering to be asynchronous. \r\n//      }\r\n//   }; */\r\n// }\r\n\r\n// console.log = () => {};\r\n\r\n// const e = new EventSystem();\r\n// MOUNT_CLASS_TO.e = e;\r\n\r\n/**\r\n * Better not to remove listeners during setting\r\n * Should add listener callback only once\r\n */\r\n\r\n// type EventLitenerCallback<T> = (data: T) => \r\n// export default class EventListenerBase<Listeners extends {[name: string]: Function}> {\r\nexport default class EventListenerBase<Listeners extends Record<string, Function>> {\r\n  protected listeners: Partial<{\r\n    [k in keyof Listeners]: Array<{callback: Listeners[k], options: boolean | AddEventListenerOptions}>\r\n  }>;\r\n  protected listenerResults: Partial<{\r\n    [k in keyof Listeners]: ArgumentTypes<Listeners[k]>\r\n  }>;\r\n\r\n  private reuseResults: boolean;\r\n\r\n  constructor(reuseResults?: boolean) {\r\n    this._constructor(reuseResults);\r\n  }\r\n\r\n  public _constructor(reuseResults = false): any {\r\n    this.reuseResults = reuseResults;\r\n    this.listeners = {};\r\n    this.listenerResults = {};\r\n  }\r\n\r\n  public addEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T], options?: boolean | AddEventListenerOptions) {\r\n    (this.listeners[name] ?? (this.listeners[name] = [])).push({callback, options}); // ! add before because if you don't, you won't be able to delete it from callback\r\n\r\n    if(this.listenerResults.hasOwnProperty(name)) {\r\n      callback(...this.listenerResults[name]);\r\n      \r\n      if((options as AddEventListenerOptions)?.once) {\r\n        this.listeners[name].pop();\r\n        return;\r\n      }\r\n    }\r\n    \r\n    //e.add(this, name, {callback, once});\r\n  }\r\n\r\n  public addMultipleEventsListeners(obj: {\r\n    [name in keyof Listeners]?: Listeners[name]\r\n  }) {\r\n    for(const i in obj) {\r\n      this.addEventListener(i, obj[i]);\r\n    }\r\n  }\r\n\r\n  public removeEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T], options?: boolean | AddEventListenerOptions) {\r\n    if(this.listeners[name]) {\r\n      this.listeners[name].findAndSplice(l => l.callback === callback);\r\n    }\r\n    //e.remove(this, name, callback);\r\n  }\r\n\r\n  // * must be protected, but who cares\r\n  public dispatchEvent<T extends keyof Listeners>(name: T, ...args: ArgumentTypes<Listeners[T]>) {\r\n    if(this.reuseResults) {\r\n      this.listenerResults[name] = args;\r\n    }\r\n\r\n    const arr: Array<SuperReturnType<Listeners[typeof name]>> = [];\r\n\r\n    /* let a = e.wm.get(this)[name];\r\n    if(!a) return arr;\r\n    const listeners = [...a]; */\r\n    const listeners = this.listeners[name];\r\n    if(listeners) {\r\n      // ! this one will guarantee execution even if delete another listener during setting\r\n      const left = listeners.slice();\r\n      left.forEach((listener) => {\r\n        const index = listeners.findIndex((l) => l.callback === listener.callback);\r\n        if(index === -1) {\r\n          return;\r\n        }\r\n\r\n        arr.push(listener.callback(...args));\r\n\r\n        if((listener.options as AddEventListenerOptions)?.once) {\r\n          this.removeEventListener(name, listener.callback);\r\n        }\r\n      });\r\n\r\n      /* for(let i = 0, length = listeners.length; i < length; ++i) {\r\n        const listener = listeners[i];\r\n        arr.push(listener.callback(...args));\r\n\r\n        if(listener.once) {\r\n          listeners.splice(i, 1);\r\n          --i;\r\n          --length;\r\n        }\r\n      } */\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  public cleanup() {\r\n    this.listeners = {}; \r\n    this.listenerResults = {};\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nconst Modes = {\r\n  test: location.search.indexOf('test=1') > 0/*  || true */,\r\n  debug: location.search.indexOf('debug=1') > 0,\r\n  http: false, //location.search.indexOf('http=1') > 0,\r\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\r\n  multipleConnections: true,\r\n  asServiceWorker: false\r\n};\r\n\r\n                  \r\n                             \r\n          \r\n\r\nexport default Modes;\r\n"],"sourceRoot":""}